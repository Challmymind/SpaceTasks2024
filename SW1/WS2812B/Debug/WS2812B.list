
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800342c  0800342c  0000442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800343c  0800343c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800343c  0800343c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800343c  0800343c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800343c  0800343c  0000443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003440  08003440  00004440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003444  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003450  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003450  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b79e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1a  00000000  00000000  000107da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  000124f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ec  00000000  00000000  000131d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267f5  00000000  00000000  00013bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2d8  00000000  00000000  0003a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1ed8  00000000  00000000  00047691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  001395ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0013cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003414 	.word	0x08003414

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003414 	.word	0x08003414

08000218 <_Z12update_clickv>:
#define PERIOD_MS 3000
uint8_t area = 0;
uint32_t last_time;
uint8_t clicked = 0;

void update_click(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(CLICKY_BUTTON_GPIO_Port, CLICKY_BUTTON_Pin)) clicked = 1;
 800021c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000220:	4809      	ldr	r0, [pc, #36]	@ (8000248 <_Z12update_clickv+0x30>)
 8000222:	f001 f955 	bl	80014d0 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	bf14      	ite	ne
 800022c:	2301      	movne	r3, #1
 800022e:	2300      	moveq	r3, #0
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d003      	beq.n	800023e <_Z12update_clickv+0x26>
 8000236:	4b05      	ldr	r3, [pc, #20]	@ (800024c <_Z12update_clickv+0x34>)
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
	else clicked = 0;
}
 800023c:	e002      	b.n	8000244 <_Z12update_clickv+0x2c>
	else clicked = 0;
 800023e:	4b03      	ldr	r3, [pc, #12]	@ (800024c <_Z12update_clickv+0x34>)
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	48000800 	.word	0x48000800
 800024c:	200000dc 	.word	0x200000dc

08000250 <_Z11update_areav>:

void update_area(){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8000256:	f000 fc2b 	bl	8000ab0 <HAL_GetTick>
 800025a:	6078      	str	r0, [r7, #4]
	if(current_time - last_time >= PERIOD_MS){
 800025c:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <_Z11update_areav+0x4c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	1ad3      	subs	r3, r2, r3
 8000264:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000268:	4293      	cmp	r3, r2
 800026a:	d905      	bls.n	8000278 <_Z11update_areav+0x28>
		last_time=current_time;
 800026c:	4a0b      	ldr	r2, [pc, #44]	@ (800029c <_Z11update_areav+0x4c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]
		area = 0;
 8000272:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <_Z11update_areav+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
	}
	// I know it will be only approximation and for small values of delta T it will be shown as 0 but it's good enough
	area = ((current_time-last_time)*255)/PERIOD_MS;
 8000278:	4b08      	ldr	r3, [pc, #32]	@ (800029c <_Z11update_areav+0x4c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	1ad2      	subs	r2, r2, r3
 8000280:	4613      	mov	r3, r2
 8000282:	021b      	lsls	r3, r3, #8
 8000284:	1a9b      	subs	r3, r3, r2
 8000286:	4a07      	ldr	r2, [pc, #28]	@ (80002a4 <_Z11update_areav+0x54>)
 8000288:	fba2 2303 	umull	r2, r3, r2, r3
 800028c:	099b      	lsrs	r3, r3, #6
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <_Z11update_areav+0x50>)
 8000292:	701a      	strb	r2, [r3, #0]
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200000d8 	.word	0x200000d8
 80002a0:	200000d4 	.word	0x200000d4
 80002a4:	057619f1 	.word	0x057619f1

080002a8 <_Z7redSteph>:

uint8_t greenStep(uint8_t area){
	return area;
}

uint8_t redStep(uint8_t area){
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	if(area < 128) return 255;
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db01      	blt.n	80002be <_Z7redSteph+0x16>
 80002ba:	23ff      	movs	r3, #255	@ 0xff
 80002bc:	e000      	b.n	80002c0 <_Z7redSteph+0x18>
	return 0;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <_Z8blueStephh>:

uint8_t blueStep(uint8_t area, uint8_t clicked){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	if(!clicked) return 0;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d101      	bne.n	80002e6 <_Z8blueStephh+0x1a>
 80002e2:	2300      	movs	r3, #0
 80002e4:	e019      	b.n	800031a <_Z8blueStephh+0x4e>

	// some approximation because it doesn't need to be that precise
	else{
		if(((area - (area % 42))/43) & 1) return 255;
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	0859      	lsrs	r1, r3, #1
 80002ec:	480e      	ldr	r0, [pc, #56]	@ (8000328 <_Z8blueStephh+0x5c>)
 80002ee:	fba0 0101 	umull	r0, r1, r0, r1
 80002f2:	0889      	lsrs	r1, r1, #2
 80002f4:	202a      	movs	r0, #42	@ 0x2a
 80002f6:	fb00 f101 	mul.w	r1, r0, r1
 80002fa:	1a5b      	subs	r3, r3, r1
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <_Z8blueStephh+0x60>)
 8000302:	fb82 1203 	smull	r1, r2, r2, r3
 8000306:	10d2      	asrs	r2, r2, #3
 8000308:	17db      	asrs	r3, r3, #31
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <_Z8blueStephh+0x4c>
 8000314:	23ff      	movs	r3, #255	@ 0xff
 8000316:	e000      	b.n	800031a <_Z8blueStephh+0x4e>
	}
	return 0;
 8000318:	2300      	movs	r3, #0
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	30c30c31 	.word	0x30c30c31
 800032c:	2fa0be83 	.word	0x2fa0be83

08000330 <_Z10modulationP3LEDii>:

int modulation(LED* led, const int i, const int feedback){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	led->blue = blueStep(area, clicked);
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <_Z10modulationP3LEDii+0x54>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	4a11      	ldr	r2, [pc, #68]	@ (8000388 <_Z10modulationP3LEDii+0x58>)
 8000342:	7812      	ldrb	r2, [r2, #0]
 8000344:	4611      	mov	r1, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ffc0 	bl	80002cc <_Z8blueStephh>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	709a      	strb	r2, [r3, #2]
	led->red = redStep(area);
 8000354:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <_Z10modulationP3LEDii+0x54>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ffa5 	bl	80002a8 <_Z7redSteph>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	705a      	strb	r2, [r3, #1]
	led->red = redStep(area);
 8000366:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <_Z10modulationP3LEDii+0x54>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff9c 	bl	80002a8 <_Z7redSteph>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	705a      	strb	r2, [r3, #1]
	return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000d4 	.word	0x200000d4
 8000388:	200000dc 	.word	0x200000dc

0800038c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	if(TIM4 == htim->Instance)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d103      	bne.n	80003a6 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
	{
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800039e:	2100      	movs	r1, #0
 80003a0:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80003a2:	f001 feaf 	bl	8002104 <HAL_TIM_PWM_Stop>
	}
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40000800 	.word	0x40000800
 80003b4:	20000028 	.word	0x20000028

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0c2      	sub	sp, #264	@ 0x108
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003be:	f000 fb12 	bl	80009e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f82b 	bl	800041c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f905 	bl	80005d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80003ca:	f000 f8d9 	bl	8000580 <_ZL11MX_DMA_Initv>
  MX_TIM4_Init();
 80003ce:	f000 f86f 	bl	80004b0 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  last_time = HAL_GetTick();
 80003d2:	f000 fb6d 	bl	8000ab0 <HAL_GetTick>
 80003d6:	4603      	mov	r3, r0
 80003d8:	4a0c      	ldr	r2, [pc, #48]	@ (800040c <main+0x54>)
 80003da:	6013      	str	r3, [r2, #0]
  area = 0;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <main+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  Strip<10>	strip(&htim4, TIM_CHANNEL_1);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	490b      	ldr	r1, [pc, #44]	@ (8000414 <main+0x5c>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f931 	bl	8000650 <_ZN5StripILi10EEC1EP17TIM_HandleTypeDefm>
  strip.setLedCallback(modulation);
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4909      	ldr	r1, [pc, #36]	@ (8000418 <main+0x60>)
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f949 	bl	800068a <_ZN5StripILi10EE14setLedCallbackEPFiP3LEDiiE>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	update_click();
 80003f8:	f7ff ff0e 	bl	8000218 <_Z12update_clickv>
	update_area();
 80003fc:	f7ff ff28 	bl	8000250 <_Z11update_areav>
    strip.run();
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f950 	bl	80006a8 <_ZN5StripILi10EE3runEv>
	update_click();
 8000408:	bf00      	nop
 800040a:	e7f5      	b.n	80003f8 <main+0x40>
 800040c:	200000d8 	.word	0x200000d8
 8000410:	200000d4 	.word	0x200000d4
 8000414:	20000028 	.word	0x20000028
 8000418:	08000331 	.word	0x08000331

0800041c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b094      	sub	sp, #80	@ 0x50
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	2238      	movs	r2, #56	@ 0x38
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f002 ffc6 	bl	80033bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800043e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000442:	f001 f85d 	bl	8001500 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000446:	2302      	movs	r3, #2
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800044e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2340      	movs	r3, #64	@ 0x40
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000454:	2300      	movs	r3, #0
 8000456:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	f107 0318 	add.w	r3, r7, #24
 800045c:	4618      	mov	r0, r3
 800045e:	f001 f903 	bl	8001668 <HAL_RCC_OscConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	bf14      	ite	ne
 8000468:	2301      	movne	r3, #1
 800046a:	2300      	moveq	r3, #0
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000472:	f000 f8e7 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000476:	230f      	movs	r3, #15
 8000478:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800047a:	2301      	movs	r3, #1
 800047c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fbfc 	bl	8001c8c <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	bf14      	ite	ne
 800049a:	2301      	movne	r3, #1
 800049c:	2300      	moveq	r3, #0
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80004a4:	f000 f8ce 	bl	8000644 <Error_Handler>
  }
}
 80004a8:	bf00      	nop
 80004aa:	3750      	adds	r7, #80	@ 0x50
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	@ 0x28
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004d4:	4b28      	ldr	r3, [pc, #160]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 80004d6:	4a29      	ldr	r2, [pc, #164]	@ (800057c <_ZL12MX_TIM4_Initv+0xcc>)
 80004d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80004da:	4b27      	ldr	r3, [pc, #156]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e0:	4b25      	ldr	r3, [pc, #148]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80004e6:	4b24      	ldr	r3, [pc, #144]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 80004e8:	2214      	movs	r2, #20
 80004ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b22      	ldr	r3, [pc, #136]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b21      	ldr	r3, [pc, #132]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80004f8:	481f      	ldr	r0, [pc, #124]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 80004fa:	f001 fdab 	bl	8002054 <HAL_TIM_PWM_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800050e:	f000 f899 	bl	8000644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	4619      	mov	r1, r3
 8000520:	4815      	ldr	r0, [pc, #84]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 8000522:	f002 feb5 	bl	8003290 <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8000536:	f000 f885 	bl	8000644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053a:	2360      	movs	r3, #96	@ 0x60
 800053c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	4809      	ldr	r0, [pc, #36]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 8000552:	f002 f89f 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	bf14      	ite	ne
 800055c:	2301      	movne	r3, #1
 800055e:	2300      	moveq	r3, #0
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8000566:	f000 f86d 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <_ZL12MX_TIM4_Initv+0xc8>)
 800056c:	f000 f98e 	bl	800088c <HAL_TIM_MspPostInit>

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	@ 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000028 	.word	0x20000028
 800057c:	40000800 	.word	0x40000800

08000580 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <_ZL11MX_DMA_Initv+0x50>)
 8000588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800058a:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <_ZL11MX_DMA_Initv+0x50>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6493      	str	r3, [r2, #72]	@ 0x48
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <_ZL11MX_DMA_Initv+0x50>)
 8000594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <_ZL11MX_DMA_Initv+0x50>)
 80005a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005a2:	4a0b      	ldr	r2, [pc, #44]	@ (80005d0 <_ZL11MX_DMA_Initv+0x50>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <_ZL11MX_DMA_Initv+0x50>)
 80005ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200b      	movs	r0, #11
 80005bc:	f000 fb5f 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c0:	200b      	movs	r0, #11
 80005c2:	f000 fb76 	bl	8000cb2 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <_ZL12MX_GPIO_Initv+0x68>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a13      	ldr	r2, [pc, #76]	@ (800063c <_ZL12MX_GPIO_Initv+0x68>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <_ZL12MX_GPIO_Initv+0x68>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <_ZL12MX_GPIO_Initv+0x68>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <_ZL12MX_GPIO_Initv+0x68>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <_ZL12MX_GPIO_Initv+0x68>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CLICKY_BUTTON_Pin */
  GPIO_InitStruct.Pin = CLICKY_BUTTON_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CLICKY_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	@ (8000640 <_ZL12MX_GPIO_Initv+0x6c>)
 8000630:	f000 fdcc 	bl	80011cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <_ZN5StripILi10EEC1EP17TIM_HandleTypeDefm>:
	 *
	 * @param N Amount of leds in the controlled strip.
	 * @param tim Handler to use PWM with DMA.
	 * @ channel Channel for DMA to PWM.
	 */
	Strip(TIM_HandleTypeDef* tim, uint32_t channel){
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	22f1      	movs	r2, #241	@ 0xf1
 8000660:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
		_tim = tim;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
		_channel = channel;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	}
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <_ZN5StripILi10EE14setLedCallbackEPFiP3LEDiiE>:
	 * @param feedback Feedback from last led. Can be used for patterns. Exception: always 0 for first led;
	 *
	 * @return Returns feedback that will be passed to next led.
	 *
	 */
	void setLedCallback(int (*modulation)(LED* led,  const int i, const int feedback)){
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
		_modulation = modulation;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_ZN5StripILi10EE3runEv>:

	void run(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
		if(_modulation == nullptr) return;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d02a      	beq.n	8000710 <_ZN5StripILi10EE3runEv+0x68>

		LED led;
		int feedback;
		for(int i = 0; i < N; i++){
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	e010      	b.n	80006e2 <_ZN5StripILi10EE3runEv+0x3a>
			feedback = _modulation(&led, i, feedback);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80006c6:	f107 000c 	add.w	r0, r7, #12
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	6939      	ldr	r1, [r7, #16]
 80006ce:	4798      	blx	r3
 80006d0:	6178      	str	r0, [r7, #20]
			_convert(led, i);
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f81e 	bl	8000718 <_ZN5StripILi10EE8_convertE3LEDi>
		for(int i = 0; i < N; i++){
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	3301      	adds	r3, #1
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	ddeb      	ble.n	80006c0 <_ZN5StripILi10EE3runEv+0x18>
		}
		_strip[_size] = RES_PWM_DUTY;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	2100      	movs	r1, #0
 80006f2:	54d1      	strb	r1, [r2, r3]
		HAL_TIM_PWM_Start_DMA(_tim, _channel, (uint32_t *)_strip, _size);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000708:	b29b      	uxth	r3, r3
 800070a:	f001 fd97 	bl	800223c <HAL_TIM_PWM_Start_DMA>
 800070e:	e000      	b.n	8000712 <_ZN5StripILi10EE3runEv+0x6a>
		if(_modulation == nullptr) return;
 8000710:	bf00      	nop
	}
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN5StripILi10EE8_convertE3LEDi>:
	 * Converts LED into WS2812B format.
	 *
	 * @param led Led to be converted
	 * @param i index of the led in the _strip
	 */
	void _convert(LED led, int i){
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]

		for(uint8_t x=0; x<3;x++){
 8000724:	2300      	movs	r3, #0
 8000726:	75fb      	strb	r3, [r7, #23]
 8000728:	e035      	b.n	8000796 <_ZN5StripILi10EE8_convertE3LEDi+0x7e>

			for(uint8_t y=0; y<PWM_DUTY_SIZE; y++)
 800072a:	2300      	movs	r3, #0
 800072c:	75bb      	strb	r3, [r7, #22]
 800072e:	e02c      	b.n	800078a <_ZN5StripILi10EE8_convertE3LEDi+0x72>
			{
				if(( ( ( (uint8_t*)(&led) )[x] >> y) & 0x01) == 1)
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	7dbb      	ldrb	r3, [r7, #22]
 800073e:	fa42 f303 	asr.w	r3, r2, r3
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00e      	beq.n	8000768 <_ZN5StripILi10EE8_convertE3LEDi+0x50>
				{
					// Move to correct led and change its duty values
					_strip[(i*3*8)+(x*8)+(7-y)] = HIGH_PWM_DUTY;
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	4613      	mov	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	441a      	add	r2, r3
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	4413      	add	r3, r2
 8000756:	00da      	lsls	r2, r3, #3
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	4413      	add	r3, r2
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	210d      	movs	r1, #13
 8000764:	54d1      	strb	r1, [r2, r3]
 8000766:	e00d      	b.n	8000784 <_ZN5StripILi10EE8_convertE3LEDi+0x6c>
				}
				else
				{
					_strip[(i*3*8)+(x*8)+(7-y)] = LOW_PWM_DUTY;
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	441a      	add	r2, r3
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	4413      	add	r3, r2
 8000774:	00da      	lsls	r2, r3, #3
 8000776:	7dbb      	ldrb	r3, [r7, #22]
 8000778:	f1c3 0307 	rsb	r3, r3, #7
 800077c:	4413      	add	r3, r2
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	2107      	movs	r1, #7
 8000782:	54d1      	strb	r1, [r2, r3]
			for(uint8_t y=0; y<PWM_DUTY_SIZE; y++)
 8000784:	7dbb      	ldrb	r3, [r7, #22]
 8000786:	3301      	adds	r3, #1
 8000788:	75bb      	strb	r3, [r7, #22]
 800078a:	7dbb      	ldrb	r3, [r7, #22]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d9cf      	bls.n	8000730 <_ZN5StripILi10EE8_convertE3LEDi+0x18>
		for(uint8_t x=0; x<3;x++){
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	3301      	adds	r3, #1
 8000794:	75fb      	strb	r3, [r7, #23]
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d9c6      	bls.n	800072a <_ZN5StripILi10EE8_convertE3LEDi+0x12>
				}
			}

		}
	}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	371c      	adds	r7, #28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007e2:	f000 ff31 	bl	8001648 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1e      	ldr	r2, [pc, #120]	@ (800087c <HAL_TIM_PWM_MspInit+0x88>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d135      	bne.n	8000872 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <HAL_TIM_PWM_MspInit+0x8c>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	4a1d      	ldr	r2, [pc, #116]	@ (8000880 <HAL_TIM_PWM_MspInit+0x8c>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6593      	str	r3, [r2, #88]	@ 0x58
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <HAL_TIM_PWM_MspInit+0x8c>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 8000820:	4a19      	ldr	r2, [pc, #100]	@ (8000888 <HAL_TIM_PWM_MspInit+0x94>)
 8000822:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 8000826:	2243      	movs	r2, #67	@ 0x43
 8000828:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 800083e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000842:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 8000858:	f000 fa46 	bl	8000ce8 <HAL_DMA_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000862:	f7ff feef 	bl	8000644 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 800086a:	625a      	str	r2, [r3, #36]	@ 0x24
 800086c:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <HAL_TIM_PWM_MspInit+0x90>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40000800 	.word	0x40000800
 8000880:	40021000 	.word	0x40021000
 8000884:	20000074 	.word	0x20000074
 8000888:	40020008 	.word	0x40020008

0800088c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <HAL_TIM_MspPostInit+0x68>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d11d      	bne.n	80008ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_TIM_MspPostInit+0x6c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a11      	ldr	r2, [pc, #68]	@ (80008f8 <HAL_TIM_MspPostInit+0x6c>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_TIM_MspPostInit+0x6c>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80008d8:	230a      	movs	r3, #10
 80008da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f000 fc71 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40000800 	.word	0x40000800
 80008f8:	40021000 	.word	0x40021000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f89b 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <DMA1_Channel1_IRQHandler+0x10>)
 8000962:	f000 fae4 	bl	8000f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000074 	.word	0x20000074

08000970 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	@ (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff ffea 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	@ (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f002 fd03 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f7ff fcf7 	bl	80003b8 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d8:	08003444 	.word	0x08003444
  ldr r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e0:	200000e4 	.word	0x200000e4

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>

080009e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f939 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 f80e 	bl	8000a18 <HAL_InitTick>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	e001      	b.n	8000a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a08:	f7ff fed0 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <HAL_InitTick+0x68>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d022      	beq.n	8000a72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_InitTick+0x6c>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <HAL_InitTick+0x68>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f944 	bl	8000cce <HAL_SYSTICK_Config>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10f      	bne.n	8000a6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b0f      	cmp	r3, #15
 8000a50:	d809      	bhi.n	8000a66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a52:	2200      	movs	r2, #0
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5a:	f000 f910 	bl	8000c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <HAL_InitTick+0x70>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e007      	b.n	8000a76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e004      	b.n	8000a76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e001      	b.n	8000a76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_IncTick+0x1c>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <HAL_IncTick+0x20>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a03      	ldr	r2, [pc, #12]	@ (8000aa8 <HAL_IncTick+0x1c>)
 8000a9c:	6013      	str	r3, [r2, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	200000e0 	.word	0x200000e0
 8000aac:	20000008 	.word	0x20000008

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200000e0 	.word	0x200000e0

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	@ (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	@ (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	@ 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8c:	f7ff ff40 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff ff90 	bl	8000bbc <NVIC_EncodePriority>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff5f 	bl	8000b68 <__NVIC_SetPriority>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff33 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffa4 	bl	8000c24 <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e08d      	b.n	8000e16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b47      	ldr	r3, [pc, #284]	@ (8000e20 <HAL_DMA_Init+0x138>)
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d80f      	bhi.n	8000d26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b45      	ldr	r3, [pc, #276]	@ (8000e24 <HAL_DMA_Init+0x13c>)
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a45      	ldr	r2, [pc, #276]	@ (8000e28 <HAL_DMA_Init+0x140>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	009a      	lsls	r2, r3, #2
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a42      	ldr	r2, [pc, #264]	@ (8000e2c <HAL_DMA_Init+0x144>)
 8000d22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d24:	e00e      	b.n	8000d44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b40      	ldr	r3, [pc, #256]	@ (8000e30 <HAL_DMA_Init+0x148>)
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a3d      	ldr	r2, [pc, #244]	@ (8000e28 <HAL_DMA_Init+0x140>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	009a      	lsls	r2, r3, #2
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a3c      	ldr	r2, [pc, #240]	@ (8000e34 <HAL_DMA_Init+0x14c>)
 8000d42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2202      	movs	r2, #2
 8000d48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f9b6 	bl	8001108 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000da4:	d102      	bne.n	8000dac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000dc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d010      	beq.n	8000dec <HAL_DMA_Init+0x104>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d80c      	bhi.n	8000dec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f9d6 	bl	8001184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	e008      	b.n	8000dfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40020407 	.word	0x40020407
 8000e24:	bffdfff8 	.word	0xbffdfff8
 8000e28:	cccccccd 	.word	0xcccccccd
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	bffdfbf8 	.word	0xbffdfbf8
 8000e34:	40020400 	.word	0x40020400

08000e38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_DMA_Start_IT+0x20>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e066      	b.n	8000f26 <HAL_DMA_Start_IT+0xee>
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d155      	bne.n	8000f18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2200      	movs	r2, #0
 8000e78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68b9      	ldr	r1, [r7, #8]
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 f8fb 	bl	800108c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d008      	beq.n	8000eb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 020e 	orr.w	r2, r2, #14
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e00f      	b.n	8000ed0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0204 	bic.w	r2, r2, #4
 8000ebe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 020a 	orr.w	r2, r2, #10
 8000ece:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000eec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0201 	orr.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e005      	b.n	8000f24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f20:	2302      	movs	r3, #2
 8000f22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f003 031f 	and.w	r3, r3, #31
 8000f4e:	2204      	movs	r2, #4
 8000f50:	409a      	lsls	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d026      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x7a>
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d021      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d107      	bne.n	8000f82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0204 	bic.w	r2, r2, #4
 8000f80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f003 021f 	and.w	r2, r3, #31
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	2104      	movs	r1, #4
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d071      	beq.n	8001082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000fa6:	e06c      	b.n	8001082 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fac:	f003 031f 	and.w	r3, r3, #31
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d02e      	beq.n	800101a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d029      	beq.n	800101a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020a 	bic.w	r2, r2, #10
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100c:	2b00      	cmp	r3, #0
 800100e:	d038      	beq.n	8001082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001018:	e033      	b.n	8001082 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	2208      	movs	r2, #8
 8001024:	409a      	lsls	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d02a      	beq.n	8001084 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d025      	beq.n	8001084 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001082:	bf00      	nop
 8001084:	bf00      	nop
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f003 021f 	and.w	r2, r3, #31
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d108      	bne.n	80010ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010ea:	e007      	b.n	80010fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	60da      	str	r2, [r3, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001118:	429a      	cmp	r2, r3
 800111a:	d802      	bhi.n	8001122 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e001      	b.n	8001126 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001124:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	3b08      	subs	r3, #8
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001134:	fba2 2303 	umull	r2, r3, r2, r3
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	009a      	lsls	r2, r3, #2
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001152:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2201      	movs	r2, #1
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40020407 	.word	0x40020407
 8001174:	40020800 	.word	0x40020800
 8001178:	40020820 	.word	0x40020820
 800117c:	cccccccd 	.word	0xcccccccd
 8001180:	40020880 	.word	0x40020880

08001184 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80011a6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2201      	movs	r2, #1
 80011b2:	409a      	lsls	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	1000823f 	.word	0x1000823f
 80011c8:	40020940 	.word	0x40020940

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011da:	e15a      	b.n	8001492 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 814c 	beq.w	800148c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d005      	beq.n	800120c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001208:	2b02      	cmp	r3, #2
 800120a:	d130      	bne.n	800126e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001242:	2201      	movs	r2, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 0201 	and.w	r2, r3, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b03      	cmp	r3, #3
 8001278:	d017      	beq.n	80012aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d123      	bne.n	80012fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0203 	and.w	r2, r3, #3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80a6 	beq.w	800148c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001340:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <HAL_GPIO_Init+0x2e4>)
 8001342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001344:	4a5a      	ldr	r2, [pc, #360]	@ (80014b0 <HAL_GPIO_Init+0x2e4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6613      	str	r3, [r2, #96]	@ 0x60
 800134c:	4b58      	ldr	r3, [pc, #352]	@ (80014b0 <HAL_GPIO_Init+0x2e4>)
 800134e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001358:	4a56      	ldr	r2, [pc, #344]	@ (80014b4 <HAL_GPIO_Init+0x2e8>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001382:	d01f      	beq.n	80013c4 <HAL_GPIO_Init+0x1f8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a4c      	ldr	r2, [pc, #304]	@ (80014b8 <HAL_GPIO_Init+0x2ec>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d019      	beq.n	80013c0 <HAL_GPIO_Init+0x1f4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a4b      	ldr	r2, [pc, #300]	@ (80014bc <HAL_GPIO_Init+0x2f0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d013      	beq.n	80013bc <HAL_GPIO_Init+0x1f0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a4a      	ldr	r2, [pc, #296]	@ (80014c0 <HAL_GPIO_Init+0x2f4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00d      	beq.n	80013b8 <HAL_GPIO_Init+0x1ec>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a49      	ldr	r2, [pc, #292]	@ (80014c4 <HAL_GPIO_Init+0x2f8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d007      	beq.n	80013b4 <HAL_GPIO_Init+0x1e8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a48      	ldr	r2, [pc, #288]	@ (80014c8 <HAL_GPIO_Init+0x2fc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_GPIO_Init+0x1e4>
 80013ac:	2305      	movs	r3, #5
 80013ae:	e00a      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013b0:	2306      	movs	r3, #6
 80013b2:	e008      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013b8:	2303      	movs	r3, #3
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013c4:	2300      	movs	r3, #0
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d6:	4937      	ldr	r1, [pc, #220]	@ (80014b4 <HAL_GPIO_Init+0x2e8>)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e4:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <HAL_GPIO_Init+0x300>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001408:	4a30      	ldr	r2, [pc, #192]	@ (80014cc <HAL_GPIO_Init+0x300>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <HAL_GPIO_Init+0x300>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001432:	4a26      	ldr	r2, [pc, #152]	@ (80014cc <HAL_GPIO_Init+0x300>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001438:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_GPIO_Init+0x300>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800145c:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <HAL_GPIO_Init+0x300>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <HAL_GPIO_Init+0x300>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001486:	4a11      	ldr	r2, [pc, #68]	@ (80014cc <HAL_GPIO_Init+0x300>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f ae9d 	bne.w	80011dc <HAL_GPIO_Init+0x10>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000800 	.word	0x48000800
 80014c0:	48000c00 	.word	0x48000c00
 80014c4:	48001000 	.word	0x48001000
 80014c8:	48001400 	.word	0x48001400
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e001      	b.n	80014f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d141      	bne.n	8001592 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800150e:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151a:	d131      	bne.n	8001580 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800151c:	4b47      	ldr	r3, [pc, #284]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001522:	4a46      	ldr	r2, [pc, #280]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152c:	4b43      	ldr	r3, [pc, #268]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001534:	4a41      	ldr	r2, [pc, #260]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001536:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153c:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2232      	movs	r2, #50	@ 0x32
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	4a3f      	ldr	r2, [pc, #252]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	0c9b      	lsrs	r3, r3, #18
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001552:	e002      	b.n	800155a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3b01      	subs	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155a:	4b38      	ldr	r3, [pc, #224]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001566:	d102      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f2      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156e:	4b33      	ldr	r3, [pc, #204]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157a:	d158      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e057      	b.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001580:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001586:	4a2d      	ldr	r2, [pc, #180]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800158c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001590:	e04d      	b.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001598:	d141      	bne.n	800161e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800159a:	4b28      	ldr	r3, [pc, #160]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a6:	d131      	bne.n	800160c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015a8:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ae:	4a23      	ldr	r2, [pc, #140]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b8:	4b20      	ldr	r3, [pc, #128]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015c0:	4a1e      	ldr	r2, [pc, #120]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2232      	movs	r2, #50	@ 0x32
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9b      	lsrs	r3, r3, #18
 80015da:	3301      	adds	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015de:	e002      	b.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f2:	d102      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f2      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001606:	d112      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e011      	b.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001618:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800161c:	e007      	b.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800162c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40007000 	.word	0x40007000
 8001640:	20000000 	.word	0x20000000
 8001644:	431bde83 	.word	0x431bde83

08001648 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001656:	6093      	str	r3, [r2, #8]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40007000 	.word	0x40007000

08001668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e2fe      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d075      	beq.n	8001772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001686:	4b97      	ldr	r3, [pc, #604]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001690:	4b94      	ldr	r3, [pc, #592]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3e>
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_OscConfig+0x44>
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d10b      	bne.n	80016c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	4b8d      	ldr	r3, [pc, #564]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d05b      	beq.n	8001770 <HAL_RCC_OscConfig+0x108>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d157      	bne.n	8001770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e2d9      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016cc:	d106      	bne.n	80016dc <HAL_RCC_OscConfig+0x74>
 80016ce:	4b85      	ldr	r3, [pc, #532]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a84      	ldr	r2, [pc, #528]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xb0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x98>
 80016e6:	4b7f      	ldr	r3, [pc, #508]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7e      	ldr	r2, [pc, #504]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b7c      	ldr	r3, [pc, #496]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7b      	ldr	r2, [pc, #492]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xb0>
 8001700:	4b78      	ldr	r3, [pc, #480]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a77      	ldr	r2, [pc, #476]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b75      	ldr	r3, [pc, #468]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a74      	ldr	r2, [pc, #464]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff f9c6 	bl	8000ab0 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff f9c2 	bl	8000ab0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	@ 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e29e      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xc0>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff f9b2 	bl	8000ab0 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff f9ae 	bl	8000ab0 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e28a      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001762:	4b60      	ldr	r3, [pc, #384]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0xe8>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d075      	beq.n	800186a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177e:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001788:	4b56      	ldr	r3, [pc, #344]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d102      	bne.n	800179e <HAL_RCC_OscConfig+0x136>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_OscConfig+0x13c>
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d11f      	bne.n	80017e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a4:	4b4f      	ldr	r3, [pc, #316]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_OscConfig+0x154>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e25d      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b49      	ldr	r3, [pc, #292]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	4946      	ldr	r1, [pc, #280]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017d0:	4b45      	ldr	r3, [pc, #276]	@ (80018e8 <HAL_RCC_OscConfig+0x280>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f91f 	bl	8000a18 <HAL_InitTick>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d043      	beq.n	8001868 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e249      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ec:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a3c      	ldr	r2, [pc, #240]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f95a 	bl	8000ab0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff f956 	bl	8000ab0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e232      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001812:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b31      	ldr	r3, [pc, #196]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	061b      	lsls	r3, r3, #24
 800182c:	492d      	ldr	r1, [pc, #180]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	e01a      	b.n	800186a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2a      	ldr	r2, [pc, #168]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 800183a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800183e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff f936 	bl	8000ab0 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff f932 	bl	8000ab0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e20e      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x1e0>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d041      	beq.n	80018fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d01c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff f90f 	bl	8000ab0 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001896:	f7ff f90b 	bl	8000ab0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1e7      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80018aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0ef      	beq.n	8001896 <HAL_RCC_OscConfig+0x22e>
 80018b6:	e020      	b.n	80018fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018be:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff f8f2 	bl	8000ab0 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ce:	e00d      	b.n	80018ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff f8ee 	bl	8000ab0 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d906      	bls.n	80018ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1ca      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ea      	bne.n	80018d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80a6 	beq.w	8001a54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800190c:	4b84      	ldr	r3, [pc, #528]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_OscConfig+0x2b4>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x2b6>
 800191c:	2300      	movs	r3, #0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b7f      	ldr	r3, [pc, #508]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	4a7e      	ldr	r2, [pc, #504]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192c:	6593      	str	r3, [r2, #88]	@ 0x58
 800192e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193e:	4b79      	ldr	r3, [pc, #484]	@ (8001b24 <HAL_RCC_OscConfig+0x4bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800194a:	4b76      	ldr	r3, [pc, #472]	@ (8001b24 <HAL_RCC_OscConfig+0x4bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	@ (8001b24 <HAL_RCC_OscConfig+0x4bc>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff f8ab 	bl	8000ab0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff f8a7 	bl	8000ab0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e183      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	4b6c      	ldr	r3, [pc, #432]	@ (8001b24 <HAL_RCC_OscConfig+0x4bc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d108      	bne.n	8001996 <HAL_RCC_OscConfig+0x32e>
 8001984:	4b66      	ldr	r3, [pc, #408]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198a:	4a65      	ldr	r2, [pc, #404]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001994:	e024      	b.n	80019e0 <HAL_RCC_OscConfig+0x378>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b05      	cmp	r3, #5
 800199c:	d110      	bne.n	80019c0 <HAL_RCC_OscConfig+0x358>
 800199e:	4b60      	ldr	r3, [pc, #384]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019be:	e00f      	b.n	80019e0 <HAL_RCC_OscConfig+0x378>
 80019c0:	4b57      	ldr	r3, [pc, #348]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c6:	4a56      	ldr	r2, [pc, #344]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d0:	4b53      	ldr	r3, [pc, #332]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a52      	ldr	r2, [pc, #328]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d016      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f862 	bl	8000ab0 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff f85e 	bl	8000ab0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e138      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ed      	beq.n	80019f0 <HAL_RCC_OscConfig+0x388>
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff f84b 	bl	8000ab0 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f847 	bl	8000ab0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e121      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a34:	4b3a      	ldr	r3, [pc, #232]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ed      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a48:	4b35      	ldr	r3, [pc, #212]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	4a34      	ldr	r2, [pc, #208]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d03c      	beq.n	8001ada <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a68:	4b2d      	ldr	r3, [pc, #180]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f81a 	bl	8000ab0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a80:	f7ff f816 	bl	8000ab0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0f2      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a92:	4b23      	ldr	r3, [pc, #140]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ef      	beq.n	8001a80 <HAL_RCC_OscConfig+0x418>
 8001aa0:	e01b      	b.n	8001ada <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7fe fffd 	bl	8000ab0 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aba:	f7fe fff9 	bl	8000ab0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0d5      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80c9 	beq.w	8001c76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	f000 8083 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d15e      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7fe ffd3 	bl	8000ab0 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	e00c      	b.n	8001b28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7fe ffcf 	bl	8000ab0 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d905      	bls.n	8001b28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0ab      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	4b55      	ldr	r3, [pc, #340]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ec      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b34:	4b52      	ldr	r3, [pc, #328]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	4b52      	ldr	r3, [pc, #328]	@ (8001c84 <HAL_RCC_OscConfig+0x61c>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6a11      	ldr	r1, [r2, #32]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b44:	3a01      	subs	r2, #1
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b4e:	0212      	lsls	r2, r2, #8
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b56:	0852      	lsrs	r2, r2, #1
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	0552      	lsls	r2, r2, #21
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b62:	0852      	lsrs	r2, r2, #1
 8001b64:	3a01      	subs	r2, #1
 8001b66:	0652      	lsls	r2, r2, #25
 8001b68:	4311      	orrs	r1, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b6e:	06d2      	lsls	r2, r2, #27
 8001b70:	430a      	orrs	r2, r1
 8001b72:	4943      	ldr	r1, [pc, #268]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a40      	ldr	r2, [pc, #256]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b84:	4b3e      	ldr	r3, [pc, #248]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4a3d      	ldr	r2, [pc, #244]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe ff8e 	bl	8000ab0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe ff8a 	bl	8000ab0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e066      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x530>
 8001bb6:	e05e      	b.n	8001c76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b31      	ldr	r3, [pc, #196]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a30      	ldr	r2, [pc, #192]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff74 	bl	8000ab0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe ff70 	bl	8000ab0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e04c      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bde:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bea:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	4924      	ldr	r1, [pc, #144]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
 8001bf6:	e03e      	b.n	8001c76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e039      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_RCC_OscConfig+0x618>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d12c      	bne.n	8001c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	3b01      	subs	r3, #1
 8001c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d123      	bne.n	8001c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d11b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d113      	bne.n	8001c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	019f800c 	.word	0x019f800c
 8001c88:	feeefffc 	.word	0xfeeefffc

08001c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e11e      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b91      	ldr	r3, [pc, #580]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b8e      	ldr	r3, [pc, #568]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	498c      	ldr	r1, [pc, #560]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b8a      	ldr	r3, [pc, #552]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e106      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d073      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d129      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce8:	4b81      	ldr	r3, [pc, #516]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0f4      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cf8:	f000 f966 	bl	8001fc8 <RCC_GetSysClockFreqFromPLLSource>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4a7c      	ldr	r2, [pc, #496]	@ (8001ef4 <HAL_RCC_ClockConfig+0x268>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d93f      	bls.n	8001d86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d06:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d033      	beq.n	8001d86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12f      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d26:	4b72      	ldr	r3, [pc, #456]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d2e:	4a70      	ldr	r2, [pc, #448]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e024      	b.n	8001d86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d44:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0c6      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d54:	4b66      	ldr	r3, [pc, #408]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0be      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d64:	f000 f8ce 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4a61      	ldr	r2, [pc, #388]	@ (8001ef4 <HAL_RCC_ClockConfig+0x268>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d909      	bls.n	8001d86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d72:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d7a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4957      	ldr	r1, [pc, #348]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d98:	f7fe fe8a 	bl	8000ab0 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe fe86 	bl	8000ab0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e095      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d023      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a42      	ldr	r2, [pc, #264]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001df8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e00:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001e02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4936      	ldr	r1, [pc, #216]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b80      	cmp	r3, #128	@ 0x80
 8001e20:	d105      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e22:	4b33      	ldr	r3, [pc, #204]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4a32      	ldr	r2, [pc, #200]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d21d      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 020f 	bic.w	r2, r3, #15
 8001e44:	4929      	ldr	r1, [pc, #164]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e4c:	f7fe fe30 	bl	8000ab0 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7fe fe2c 	bl	8000ab0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e03b      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <HAL_RCC_ClockConfig+0x260>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1ed      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4917      	ldr	r1, [pc, #92]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490f      	ldr	r1, [pc, #60]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb6:	f000 f825 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <HAL_RCC_ClockConfig+0x264>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	490c      	ldr	r1, [pc, #48]	@ (8001ef8 <HAL_RCC_ClockConfig+0x26c>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_RCC_ClockConfig+0x270>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_RCC_ClockConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fd9c 	bl	8000a18 <HAL_InitTick>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	04c4b400 	.word	0x04c4b400
 8001ef8:	0800342c 	.word	0x0800342c
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f16:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	e047      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f1c:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d102      	bne.n	8001f2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e03e      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d136      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f58:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	4a16      	ldr	r2, [pc, #88]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f62:	68d2      	ldr	r2, [r2, #12]
 8001f64:	0a12      	lsrs	r2, r2, #8
 8001f66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
      break;
 8001f70:	e00c      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f72:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4a10      	ldr	r2, [pc, #64]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7c:	68d2      	ldr	r2, [r2, #12]
 8001f7e:	0a12      	lsrs	r2, r2, #8
 8001f80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
      break;
 8001f8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0e5b      	lsrs	r3, r3, #25
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	3301      	adds	r3, #1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e001      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fac:	693b      	ldr	r3, [r7, #16]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	007a1200 	.word	0x007a1200

08001fc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d10c      	bne.n	8002006 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fec:	4a17      	ldr	r2, [pc, #92]	@ (800204c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ff6:	68d2      	ldr	r2, [r2, #12]
 8001ff8:	0a12      	lsrs	r2, r2, #8
 8001ffa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
    break;
 8002004:	e00c      	b.n	8002020 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002010:	68d2      	ldr	r2, [r2, #12]
 8002012:	0a12      	lsrs	r2, r2, #8
 8002014:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    break;
 800201e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002020:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0e5b      	lsrs	r3, r3, #25
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	3301      	adds	r3, #1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000
 800204c:	007a1200 	.word	0x007a1200
 8002050:	00f42400 	.word	0x00f42400

08002054 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e049      	b.n	80020fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fbba 	bl	80007f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3304      	adds	r3, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f000 fcf8 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f001 f894 	bl	8003244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a40      	ldr	r2, [pc, #256]	@ (8002224 <HAL_TIM_PWM_Stop+0x120>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_TIM_PWM_Stop+0x54>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a3f      	ldr	r2, [pc, #252]	@ (8002228 <HAL_TIM_PWM_Stop+0x124>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_TIM_PWM_Stop+0x54>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3d      	ldr	r2, [pc, #244]	@ (800222c <HAL_TIM_PWM_Stop+0x128>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_TIM_PWM_Stop+0x54>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3c      	ldr	r2, [pc, #240]	@ (8002230 <HAL_TIM_PWM_Stop+0x12c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_TIM_PWM_Stop+0x54>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <HAL_TIM_PWM_Stop+0x130>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_TIM_PWM_Stop+0x54>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a39      	ldr	r2, [pc, #228]	@ (8002238 <HAL_TIM_PWM_Stop+0x134>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_TIM_PWM_Stop+0x58>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_TIM_PWM_Stop+0x5a>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d017      	beq.n	8002192 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	f241 1311 	movw	r3, #4369	@ 0x1111
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_TIM_PWM_Stop+0x8e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	f244 4344 	movw	r3, #17476	@ 0x4444
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <HAL_TIM_PWM_Stop+0x8e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	f241 1311 	movw	r3, #4369	@ 0x1111
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_TIM_PWM_Stop+0xbe>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_TIM_PWM_Stop+0xbe>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_PWM_Stop+0xce>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d0:	e023      	b.n	800221a <HAL_TIM_PWM_Stop+0x116>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_PWM_Stop+0xde>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021e0:	e01b      	b.n	800221a <HAL_TIM_PWM_Stop+0x116>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Stop+0xee>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f0:	e013      	b.n	800221a <HAL_TIM_PWM_Stop+0x116>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	d104      	bne.n	8002202 <HAL_TIM_PWM_Stop+0xfe>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002200:	e00b      	b.n	800221a <HAL_TIM_PWM_Stop+0x116>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b10      	cmp	r3, #16
 8002206:	d104      	bne.n	8002212 <HAL_TIM_PWM_Stop+0x10e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002210:	e003      	b.n	800221a <HAL_TIM_PWM_Stop+0x116>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40013400 	.word	0x40013400
 800222c:	40014000 	.word	0x40014000
 8002230:	40014400 	.word	0x40014400
 8002234:	40014800 	.word	0x40014800
 8002238:	40015000 	.word	0x40015000

0800223c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e03c      	b.n	80022e2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d109      	bne.n	8002282 <HAL_TIM_PWM_Start_DMA+0x46>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e02f      	b.n	80022e2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start_DMA+0x60>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e022      	b.n	80022e2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d109      	bne.n	80022b6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e015      	b.n	80022e2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d109      	bne.n	80022d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e008      	b.n	80022e2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	e1b5      	b.n	8002656 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_TIM_PWM_Start_DMA+0xc8>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e03c      	b.n	800237e <HAL_TIM_PWM_Start_DMA+0x142>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d109      	bne.n	800231e <HAL_TIM_PWM_Start_DMA+0xe2>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	e02f      	b.n	800237e <HAL_TIM_PWM_Start_DMA+0x142>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d109      	bne.n	8002338 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e022      	b.n	800237e <HAL_TIM_PWM_Start_DMA+0x142>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d109      	bne.n	8002352 <HAL_TIM_PWM_Start_DMA+0x116>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e015      	b.n	800237e <HAL_TIM_PWM_Start_DMA+0x142>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b10      	cmp	r3, #16
 8002356:	d109      	bne.n	800236c <HAL_TIM_PWM_Start_DMA+0x130>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e008      	b.n	800237e <HAL_TIM_PWM_Start_DMA+0x142>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d034      	beq.n	80023ec <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_TIM_PWM_Start_DMA+0x152>
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e161      	b.n	8002656 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start_DMA+0x166>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023a0:	e026      	b.n	80023f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Start_DMA+0x176>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b0:	e01e      	b.n	80023f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_PWM_Start_DMA+0x186>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c0:	e016      	b.n	80023f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d104      	bne.n	80023d2 <HAL_TIM_PWM_Start_DMA+0x196>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023d0:	e00e      	b.n	80023f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d104      	bne.n	80023e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023e0:	e006      	b.n	80023f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023ea:	e001      	b.n	80023f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e132      	b.n	8002656 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	f200 80ae 	bhi.w	8002554 <HAL_TIM_PWM_Start_DMA+0x318>
 80023f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002400 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	08002435 	.word	0x08002435
 8002404:	08002555 	.word	0x08002555
 8002408:	08002555 	.word	0x08002555
 800240c:	08002555 	.word	0x08002555
 8002410:	0800247d 	.word	0x0800247d
 8002414:	08002555 	.word	0x08002555
 8002418:	08002555 	.word	0x08002555
 800241c:	08002555 	.word	0x08002555
 8002420:	080024c5 	.word	0x080024c5
 8002424:	08002555 	.word	0x08002555
 8002428:	08002555 	.word	0x08002555
 800242c:	08002555 	.word	0x08002555
 8002430:	0800250d 	.word	0x0800250d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	4a89      	ldr	r2, [pc, #548]	@ (8002660 <HAL_TIM_PWM_Start_DMA+0x424>)
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	4a88      	ldr	r2, [pc, #544]	@ (8002664 <HAL_TIM_PWM_Start_DMA+0x428>)
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	4a87      	ldr	r2, [pc, #540]	@ (8002668 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800244a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3334      	adds	r3, #52	@ 0x34
 8002458:	461a      	mov	r2, r3
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	f7fe fcec 	bl	8000e38 <HAL_DMA_Start_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0f5      	b.n	8002656 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002478:	60da      	str	r2, [r3, #12]
      break;
 800247a:	e06e      	b.n	800255a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	4a77      	ldr	r2, [pc, #476]	@ (8002660 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002482:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	4a76      	ldr	r2, [pc, #472]	@ (8002664 <HAL_TIM_PWM_Start_DMA+0x428>)
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	4a75      	ldr	r2, [pc, #468]	@ (8002668 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3338      	adds	r3, #56	@ 0x38
 80024a0:	461a      	mov	r2, r3
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	f7fe fcc8 	bl	8000e38 <HAL_DMA_Start_IT>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0d1      	b.n	8002656 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024c0:	60da      	str	r2, [r3, #12]
      break;
 80024c2:	e04a      	b.n	800255a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_TIM_PWM_Start_DMA+0x424>)
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	4a64      	ldr	r2, [pc, #400]	@ (8002664 <HAL_TIM_PWM_Start_DMA+0x428>)
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d8:	4a63      	ldr	r2, [pc, #396]	@ (8002668 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80024da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	333c      	adds	r3, #60	@ 0x3c
 80024e8:	461a      	mov	r2, r3
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	f7fe fca4 	bl	8000e38 <HAL_DMA_Start_IT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0ad      	b.n	8002656 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002508:	60da      	str	r2, [r3, #12]
      break;
 800250a:	e026      	b.n	800255a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	4a53      	ldr	r2, [pc, #332]	@ (8002660 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002512:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	4a52      	ldr	r2, [pc, #328]	@ (8002664 <HAL_TIM_PWM_Start_DMA+0x428>)
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	4a51      	ldr	r2, [pc, #324]	@ (8002668 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8002522:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3340      	adds	r3, #64	@ 0x40
 8002530:	461a      	mov	r2, r3
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	f7fe fc80 	bl	8000e38 <HAL_DMA_Start_IT>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e089      	b.n	8002656 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002550:	60da      	str	r2, [r3, #12]
      break;
 8002552:	e002      	b.n	800255a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
      break;
 8002558:	bf00      	nop
  }

  if (status == HAL_OK)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d179      	bne.n	8002654 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fe6b 	bl	8003244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a3e      	ldr	r2, [pc, #248]	@ (800266c <HAL_TIM_PWM_Start_DMA+0x430>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d018      	beq.n	80025aa <HAL_TIM_PWM_Start_DMA+0x36e>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3c      	ldr	r2, [pc, #240]	@ (8002670 <HAL_TIM_PWM_Start_DMA+0x434>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_TIM_PWM_Start_DMA+0x36e>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a3b      	ldr	r2, [pc, #236]	@ (8002674 <HAL_TIM_PWM_Start_DMA+0x438>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00e      	beq.n	80025aa <HAL_TIM_PWM_Start_DMA+0x36e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a39      	ldr	r2, [pc, #228]	@ (8002678 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_TIM_PWM_Start_DMA+0x36e>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a38      	ldr	r2, [pc, #224]	@ (800267c <HAL_TIM_PWM_Start_DMA+0x440>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_TIM_PWM_Start_DMA+0x36e>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a36      	ldr	r2, [pc, #216]	@ (8002680 <HAL_TIM_PWM_Start_DMA+0x444>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_PWM_Start_DMA+0x372>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_TIM_PWM_Start_DMA+0x374>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a28      	ldr	r2, [pc, #160]	@ (800266c <HAL_TIM_PWM_Start_DMA+0x430>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d022      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d6:	d01d      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a29      	ldr	r2, [pc, #164]	@ (8002684 <HAL_TIM_PWM_Start_DMA+0x448>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d018      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a28      	ldr	r2, [pc, #160]	@ (8002688 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a26      	ldr	r2, [pc, #152]	@ (800268c <HAL_TIM_PWM_Start_DMA+0x450>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00e      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <HAL_TIM_PWM_Start_DMA+0x434>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d009      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1b      	ldr	r2, [pc, #108]	@ (8002674 <HAL_TIM_PWM_Start_DMA+0x438>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <HAL_TIM_PWM_Start_DMA+0x444>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d115      	bne.n	8002640 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <HAL_TIM_PWM_Start_DMA+0x454>)
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d015      	beq.n	8002652 <HAL_TIM_PWM_Start_DMA+0x416>
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d011      	beq.n	8002652 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263e:	e008      	b.n	8002652 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e000      	b.n	8002654 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002654:	7dfb      	ldrb	r3, [r7, #23]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	08002977 	.word	0x08002977
 8002664:	08002a1f 	.word	0x08002a1f
 8002668:	080028e5 	.word	0x080028e5
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40013400 	.word	0x40013400
 8002674:	40014000 	.word	0x40014000
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800
 8002680:	40015000 	.word	0x40015000
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	00010007 	.word	0x00010007

08002694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0ff      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b14      	cmp	r3, #20
 80026be:	f200 80f0 	bhi.w	80028a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80026c2:	a201      	add	r2, pc, #4	@ (adr r2, 80026c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	0800271d 	.word	0x0800271d
 80026cc:	080028a3 	.word	0x080028a3
 80026d0:	080028a3 	.word	0x080028a3
 80026d4:	080028a3 	.word	0x080028a3
 80026d8:	0800275d 	.word	0x0800275d
 80026dc:	080028a3 	.word	0x080028a3
 80026e0:	080028a3 	.word	0x080028a3
 80026e4:	080028a3 	.word	0x080028a3
 80026e8:	0800279f 	.word	0x0800279f
 80026ec:	080028a3 	.word	0x080028a3
 80026f0:	080028a3 	.word	0x080028a3
 80026f4:	080028a3 	.word	0x080028a3
 80026f8:	080027df 	.word	0x080027df
 80026fc:	080028a3 	.word	0x080028a3
 8002700:	080028a3 	.word	0x080028a3
 8002704:	080028a3 	.word	0x080028a3
 8002708:	08002821 	.word	0x08002821
 800270c:	080028a3 	.word	0x080028a3
 8002710:	080028a3 	.word	0x080028a3
 8002714:	080028a3 	.word	0x080028a3
 8002718:	08002861 	.word	0x08002861
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa64 	bl	8002bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0208 	orr.w	r2, r2, #8
 8002736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6999      	ldr	r1, [r3, #24]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	619a      	str	r2, [r3, #24]
      break;
 800275a:	e0a5      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fade 	bl	8002d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6999      	ldr	r1, [r3, #24]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	021a      	lsls	r2, r3, #8
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	619a      	str	r2, [r3, #24]
      break;
 800279c:	e084      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fb51 	bl	8002e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0208 	orr.w	r2, r2, #8
 80027b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0204 	bic.w	r2, r2, #4
 80027c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69d9      	ldr	r1, [r3, #28]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	61da      	str	r2, [r3, #28]
      break;
 80027dc:	e064      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fbc3 	bl	8002f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69d9      	ldr	r1, [r3, #28]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	021a      	lsls	r2, r3, #8
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	61da      	str	r2, [r3, #28]
      break;
 800281e:	e043      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fc36 	bl	8003098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0204 	bic.w	r2, r2, #4
 800284a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800285e:	e023      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fc80 	bl	800316c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800287a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800288a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	021a      	lsls	r2, r3, #8
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80028a0:	e002      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
      break;
 80028a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop

080028bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800290a:	e02a      	b.n	8002962 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d107      	bne.n	8002926 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2202      	movs	r2, #2
 800291a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002924:	e01d      	b.n	8002962 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	d107      	bne.n	8002940 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2204      	movs	r2, #4
 8002934:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800293e:	e010      	b.n	8002962 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d107      	bne.n	800295a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2208      	movs	r2, #8
 800294e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002958:	e003      	b.n	8002962 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ffb4 	bl	80028d0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	771a      	strb	r2, [r3, #28]
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d10b      	bne.n	80029a6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d136      	bne.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a4:	e031      	b.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d10b      	bne.n	80029c8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2202      	movs	r2, #2
 80029b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d125      	bne.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c6:	e020      	b.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d10b      	bne.n	80029ea <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2204      	movs	r2, #4
 80029d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d114      	bne.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e8:	e00f      	b.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d10a      	bne.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2208      	movs	r2, #8
 80029f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7fd fcbe 	bl	800038c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	771a      	strb	r2, [r3, #28]
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d103      	bne.n	8002a3e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	771a      	strb	r2, [r3, #28]
 8002a3c:	e019      	b.n	8002a72 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d103      	bne.n	8002a50 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	771a      	strb	r2, [r3, #28]
 8002a4e:	e010      	b.n	8002a72 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d103      	bne.n	8002a62 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	771a      	strb	r2, [r3, #28]
 8002a60:	e007      	b.n	8002a72 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d102      	bne.n	8002a72 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2208      	movs	r2, #8
 8002a70:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ff22 	bl	80028bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	771a      	strb	r2, [r3, #28]
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a4c      	ldr	r2, [pc, #304]	@ (8002bcc <TIM_Base_SetConfig+0x144>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d017      	beq.n	8002ad0 <TIM_Base_SetConfig+0x48>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa6:	d013      	beq.n	8002ad0 <TIM_Base_SetConfig+0x48>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a49      	ldr	r2, [pc, #292]	@ (8002bd0 <TIM_Base_SetConfig+0x148>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00f      	beq.n	8002ad0 <TIM_Base_SetConfig+0x48>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a48      	ldr	r2, [pc, #288]	@ (8002bd4 <TIM_Base_SetConfig+0x14c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_Base_SetConfig+0x48>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a47      	ldr	r2, [pc, #284]	@ (8002bd8 <TIM_Base_SetConfig+0x150>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <TIM_Base_SetConfig+0x48>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a46      	ldr	r2, [pc, #280]	@ (8002bdc <TIM_Base_SetConfig+0x154>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0x48>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a45      	ldr	r2, [pc, #276]	@ (8002be0 <TIM_Base_SetConfig+0x158>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a39      	ldr	r2, [pc, #228]	@ (8002bcc <TIM_Base_SetConfig+0x144>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d023      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af0:	d01f      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a36      	ldr	r2, [pc, #216]	@ (8002bd0 <TIM_Base_SetConfig+0x148>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01b      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a35      	ldr	r2, [pc, #212]	@ (8002bd4 <TIM_Base_SetConfig+0x14c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d017      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a34      	ldr	r2, [pc, #208]	@ (8002bd8 <TIM_Base_SetConfig+0x150>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a33      	ldr	r2, [pc, #204]	@ (8002bdc <TIM_Base_SetConfig+0x154>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a33      	ldr	r2, [pc, #204]	@ (8002be4 <TIM_Base_SetConfig+0x15c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a32      	ldr	r2, [pc, #200]	@ (8002be8 <TIM_Base_SetConfig+0x160>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a31      	ldr	r2, [pc, #196]	@ (8002bec <TIM_Base_SetConfig+0x164>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_Base_SetConfig+0xaa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002be0 <TIM_Base_SetConfig+0x158>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <TIM_Base_SetConfig+0x144>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <TIM_Base_SetConfig+0x110>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <TIM_Base_SetConfig+0x154>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00f      	beq.n	8002b98 <TIM_Base_SetConfig+0x110>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002be4 <TIM_Base_SetConfig+0x15c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <TIM_Base_SetConfig+0x110>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <TIM_Base_SetConfig+0x160>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_Base_SetConfig+0x110>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a18      	ldr	r2, [pc, #96]	@ (8002bec <TIM_Base_SetConfig+0x164>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0x110>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <TIM_Base_SetConfig+0x158>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d105      	bne.n	8002bbe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f023 0201 	bic.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	611a      	str	r2, [r3, #16]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40000c00 	.word	0x40000c00
 8002bdc:	40013400 	.word	0x40013400
 8002be0:	40015000 	.word	0x40015000
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800

08002bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0201 	bic.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a30      	ldr	r2, [pc, #192]	@ (8002d0c <TIM_OC1_SetConfig+0x11c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d013      	beq.n	8002c78 <TIM_OC1_SetConfig+0x88>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a2f      	ldr	r2, [pc, #188]	@ (8002d10 <TIM_OC1_SetConfig+0x120>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00f      	beq.n	8002c78 <TIM_OC1_SetConfig+0x88>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d14 <TIM_OC1_SetConfig+0x124>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00b      	beq.n	8002c78 <TIM_OC1_SetConfig+0x88>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <TIM_OC1_SetConfig+0x128>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_OC1_SetConfig+0x88>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <TIM_OC1_SetConfig+0x12c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_OC1_SetConfig+0x88>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a2b      	ldr	r2, [pc, #172]	@ (8002d20 <TIM_OC1_SetConfig+0x130>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10c      	bne.n	8002c92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f023 0308 	bic.w	r3, r3, #8
 8002c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <TIM_OC1_SetConfig+0x11c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <TIM_OC1_SetConfig+0xd2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d10 <TIM_OC1_SetConfig+0x120>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00f      	beq.n	8002cc2 <TIM_OC1_SetConfig+0xd2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d14 <TIM_OC1_SetConfig+0x124>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00b      	beq.n	8002cc2 <TIM_OC1_SetConfig+0xd2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <TIM_OC1_SetConfig+0x128>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <TIM_OC1_SetConfig+0xd2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a19      	ldr	r2, [pc, #100]	@ (8002d1c <TIM_OC1_SetConfig+0x12c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d003      	beq.n	8002cc2 <TIM_OC1_SetConfig+0xd2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <TIM_OC1_SetConfig+0x130>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d111      	bne.n	8002ce6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40013400 	.word	0x40013400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800
 8002d20:	40015000 	.word	0x40015000

08002d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f023 0210 	bic.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f023 0320 	bic.w	r3, r3, #32
 8002d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a2c      	ldr	r2, [pc, #176]	@ (8002e34 <TIM_OC2_SetConfig+0x110>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_OC2_SetConfig+0x74>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002e38 <TIM_OC2_SetConfig+0x114>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_OC2_SetConfig+0x74>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a2a      	ldr	r2, [pc, #168]	@ (8002e3c <TIM_OC2_SetConfig+0x118>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d10d      	bne.n	8002db4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e34 <TIM_OC2_SetConfig+0x110>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <TIM_OC2_SetConfig+0xc0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <TIM_OC2_SetConfig+0x114>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00f      	beq.n	8002de4 <TIM_OC2_SetConfig+0xc0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <TIM_OC2_SetConfig+0x11c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <TIM_OC2_SetConfig+0xc0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <TIM_OC2_SetConfig+0x120>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <TIM_OC2_SetConfig+0xc0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <TIM_OC2_SetConfig+0x124>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d003      	beq.n	8002de4 <TIM_OC2_SetConfig+0xc0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a17      	ldr	r2, [pc, #92]	@ (8002e3c <TIM_OC2_SetConfig+0x118>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d113      	bne.n	8002e0c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002df2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40013400 	.word	0x40013400
 8002e3c:	40015000 	.word	0x40015000
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800

08002e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f58 <TIM_OC3_SetConfig+0x10c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <TIM_OC3_SetConfig+0x72>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f5c <TIM_OC3_SetConfig+0x110>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_OC3_SetConfig+0x72>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a29      	ldr	r2, [pc, #164]	@ (8002f60 <TIM_OC3_SetConfig+0x114>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10d      	bne.n	8002eda <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f58 <TIM_OC3_SetConfig+0x10c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <TIM_OC3_SetConfig+0xbe>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <TIM_OC3_SetConfig+0x110>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00f      	beq.n	8002f0a <TIM_OC3_SetConfig+0xbe>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <TIM_OC3_SetConfig+0x118>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_OC3_SetConfig+0xbe>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f68 <TIM_OC3_SetConfig+0x11c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <TIM_OC3_SetConfig+0xbe>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f6c <TIM_OC3_SetConfig+0x120>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_OC3_SetConfig+0xbe>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a16      	ldr	r2, [pc, #88]	@ (8002f60 <TIM_OC3_SetConfig+0x114>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d113      	bne.n	8002f32 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	621a      	str	r2, [r3, #32]
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40013400 	.word	0x40013400
 8002f60:	40015000 	.word	0x40015000
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800

08002f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	031b      	lsls	r3, r3, #12
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a2c      	ldr	r2, [pc, #176]	@ (8003080 <TIM_OC4_SetConfig+0x110>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_OC4_SetConfig+0x74>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <TIM_OC4_SetConfig+0x114>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_OC4_SetConfig+0x74>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a2a      	ldr	r2, [pc, #168]	@ (8003088 <TIM_OC4_SetConfig+0x118>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10d      	bne.n	8003000 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	031b      	lsls	r3, r3, #12
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ffe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1f      	ldr	r2, [pc, #124]	@ (8003080 <TIM_OC4_SetConfig+0x110>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <TIM_OC4_SetConfig+0xc0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a1e      	ldr	r2, [pc, #120]	@ (8003084 <TIM_OC4_SetConfig+0x114>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00f      	beq.n	8003030 <TIM_OC4_SetConfig+0xc0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <TIM_OC4_SetConfig+0x11c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00b      	beq.n	8003030 <TIM_OC4_SetConfig+0xc0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1d      	ldr	r2, [pc, #116]	@ (8003090 <TIM_OC4_SetConfig+0x120>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <TIM_OC4_SetConfig+0xc0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <TIM_OC4_SetConfig+0x124>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_OC4_SetConfig+0xc0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a17      	ldr	r2, [pc, #92]	@ (8003088 <TIM_OC4_SetConfig+0x118>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d113      	bne.n	8003058 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003036:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800303e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40013400 	.word	0x40013400
 8003088:	40015000 	.word	0x40015000
 800308c:	40014000 	.word	0x40014000
 8003090:	40014400 	.word	0x40014400
 8003094:	40014800 	.word	0x40014800

08003098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80030dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a19      	ldr	r2, [pc, #100]	@ (8003154 <TIM_OC5_SetConfig+0xbc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <TIM_OC5_SetConfig+0x82>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a18      	ldr	r2, [pc, #96]	@ (8003158 <TIM_OC5_SetConfig+0xc0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00f      	beq.n	800311a <TIM_OC5_SetConfig+0x82>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a17      	ldr	r2, [pc, #92]	@ (800315c <TIM_OC5_SetConfig+0xc4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_OC5_SetConfig+0x82>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <TIM_OC5_SetConfig+0xc8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_OC5_SetConfig+0x82>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <TIM_OC5_SetConfig+0xcc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_OC5_SetConfig+0x82>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <TIM_OC5_SetConfig+0xd0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d109      	bne.n	800312e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003120:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	621a      	str	r2, [r3, #32]
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40013400 	.word	0x40013400
 800315c:	40014000 	.word	0x40014000
 8003160:	40014400 	.word	0x40014400
 8003164:	40014800 	.word	0x40014800
 8003168:	40015000 	.word	0x40015000

0800316c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800319e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	051b      	lsls	r3, r3, #20
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <TIM_OC6_SetConfig+0xc0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <TIM_OC6_SetConfig+0x84>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <TIM_OC6_SetConfig+0xc4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00f      	beq.n	80031f0 <TIM_OC6_SetConfig+0x84>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a18      	ldr	r2, [pc, #96]	@ (8003234 <TIM_OC6_SetConfig+0xc8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <TIM_OC6_SetConfig+0x84>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <TIM_OC6_SetConfig+0xcc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <TIM_OC6_SetConfig+0x84>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a16      	ldr	r2, [pc, #88]	@ (800323c <TIM_OC6_SetConfig+0xd0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC6_SetConfig+0x84>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a15      	ldr	r2, [pc, #84]	@ (8003240 <TIM_OC6_SetConfig+0xd4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d109      	bne.n	8003204 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	029b      	lsls	r3, r3, #10
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40013400 	.word	0x40013400
 8003234:	40014000 	.word	0x40014000
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800
 8003240:	40015000 	.word	0x40015000

08003244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2201      	movs	r2, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	43db      	mvns	r3, r3
 8003266:	401a      	ands	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e074      	b.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a34      	ldr	r2, [pc, #208]	@ (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a33      	ldr	r2, [pc, #204]	@ (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a31      	ldr	r2, [pc, #196]	@ (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80032ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80032fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a21      	ldr	r2, [pc, #132]	@ (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003328:	d01d      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d018      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1d      	ldr	r2, [pc, #116]	@ (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1c      	ldr	r2, [pc, #112]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a15      	ldr	r2, [pc, #84]	@ (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800336c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40013400 	.word	0x40013400
 80033a8:	40015000 	.word	0x40015000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40014000 	.word	0x40014000

080033bc <memset>:
 80033bc:	4402      	add	r2, r0
 80033be:	4603      	mov	r3, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <memset+0xa>
 80033c4:	4770      	bx	lr
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <memset+0x4>

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003404 <__libc_init_array+0x38>)
 80033d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003408 <__libc_init_array+0x3c>)
 80033d2:	1b64      	subs	r4, r4, r5
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	2600      	movs	r6, #0
 80033d8:	42a6      	cmp	r6, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	4d0b      	ldr	r5, [pc, #44]	@ (800340c <__libc_init_array+0x40>)
 80033de:	4c0c      	ldr	r4, [pc, #48]	@ (8003410 <__libc_init_array+0x44>)
 80033e0:	f000 f818 	bl	8003414 <_init>
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	2600      	movs	r6, #0
 80033ea:	42a6      	cmp	r6, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f4:	4798      	blx	r3
 80033f6:	3601      	adds	r6, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fe:	4798      	blx	r3
 8003400:	3601      	adds	r6, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	0800343c 	.word	0x0800343c
 8003408:	0800343c 	.word	0x0800343c
 800340c:	0800343c 	.word	0x0800343c
 8003410:	08003440 	.word	0x08003440

08003414 <_init>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr

08003420 <_fini>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr
