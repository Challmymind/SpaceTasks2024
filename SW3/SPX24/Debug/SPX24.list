
SPX24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003944  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003b1c  08003b1c  00004b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b2c  08003b2c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b2c  08003b2c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00004b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08003b40  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08003b40  000050a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba09  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e56  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  000128a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000820  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028867  00000000  00000000  00013ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0be  00000000  00000000  0003c407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc30d  00000000  00000000  000484c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001447d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  00144818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0014745c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b04 	.word	0x08003b04

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003b04 	.word	0x08003b04

08000218 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t>:
void SPX24::readSensor(SPX24::PARAMETER x,
		GPIO_TypeDef *CTRL0_PORT, uint16_t CTRL0_PIN,
		GPIO_TypeDef *CTRL1_PORT, uint16_t CTRL1_PIN,
		GPIO_TypeDef *TR_PORT, uint16_t TR_PIN)

{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60b9      	str	r1, [r7, #8]
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	4603      	mov	r3, r0
 8000224:	73fb      	strb	r3, [r7, #15]
 8000226:	4613      	mov	r3, r2
 8000228:	81bb      	strh	r3, [r7, #12]
	switch(x){
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b02      	cmp	r3, #2
 800022e:	d032      	beq.n	8000296 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0x7e>
 8000230:	2b02      	cmp	r3, #2
 8000232:	dc46      	bgt.n	80002c2 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0xaa>
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0x26>
 8000238:	2b01      	cmp	r3, #1
 800023a:	d016      	beq.n	800026a <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0x52>
		HAL_GPIO_WritePin(TR_PORT, TR_PIN, GPIO_PIN_SET);
		_last_requested = x;
		break;
	}

}
 800023c:	e041      	b.n	80002c2 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0xaa>
		HAL_GPIO_WritePin(CTRL0_PORT, CTRL0_PIN, GPIO_PIN_RESET);
 800023e:	89bb      	ldrh	r3, [r7, #12]
 8000240:	2200      	movs	r2, #0
 8000242:	4619      	mov	r1, r3
 8000244:	68b8      	ldr	r0, [r7, #8]
 8000246:	f002 fc09 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CTRL1_PORT, CTRL1_PIN, GPIO_PIN_RESET);
 800024a:	8b3b      	ldrh	r3, [r7, #24]
 800024c:	2200      	movs	r2, #0
 800024e:	4619      	mov	r1, r3
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f002 fc03 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TR_PORT, TR_PIN, GPIO_PIN_SET);
 8000256:	8c3b      	ldrh	r3, [r7, #32]
 8000258:	2201      	movs	r2, #1
 800025a:	4619      	mov	r1, r3
 800025c:	69f8      	ldr	r0, [r7, #28]
 800025e:	f002 fbfd 	bl	8002a5c <HAL_GPIO_WritePin>
		_last_requested = x;
 8000262:	4a1a      	ldr	r2, [pc, #104]	@ (80002cc <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0xb4>)
 8000264:	7bfb      	ldrb	r3, [r7, #15]
 8000266:	7013      	strb	r3, [r2, #0]
		break;
 8000268:	e02b      	b.n	80002c2 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0xaa>
		HAL_GPIO_WritePin(CTRL0_PORT, CTRL0_PIN, GPIO_PIN_RESET);
 800026a:	89bb      	ldrh	r3, [r7, #12]
 800026c:	2200      	movs	r2, #0
 800026e:	4619      	mov	r1, r3
 8000270:	68b8      	ldr	r0, [r7, #8]
 8000272:	f002 fbf3 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CTRL1_PORT, CTRL1_PIN, GPIO_PIN_SET);
 8000276:	8b3b      	ldrh	r3, [r7, #24]
 8000278:	2201      	movs	r2, #1
 800027a:	4619      	mov	r1, r3
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f002 fbed 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TR_PORT, TR_PIN, GPIO_PIN_SET);
 8000282:	8c3b      	ldrh	r3, [r7, #32]
 8000284:	2201      	movs	r2, #1
 8000286:	4619      	mov	r1, r3
 8000288:	69f8      	ldr	r0, [r7, #28]
 800028a:	f002 fbe7 	bl	8002a5c <HAL_GPIO_WritePin>
		_last_requested = x;
 800028e:	4a0f      	ldr	r2, [pc, #60]	@ (80002cc <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0xb4>)
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	7013      	strb	r3, [r2, #0]
		break;
 8000294:	e015      	b.n	80002c2 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0xaa>
		HAL_GPIO_WritePin(CTRL0_PORT, CTRL0_PIN, GPIO_PIN_SET);
 8000296:	89bb      	ldrh	r3, [r7, #12]
 8000298:	2201      	movs	r2, #1
 800029a:	4619      	mov	r1, r3
 800029c:	68b8      	ldr	r0, [r7, #8]
 800029e:	f002 fbdd 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CTRL1_PORT, CTRL1_PIN, GPIO_PIN_RESET);
 80002a2:	8b3b      	ldrh	r3, [r7, #24]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f002 fbd7 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TR_PORT, TR_PIN, GPIO_PIN_SET);
 80002ae:	8c3b      	ldrh	r3, [r7, #32]
 80002b0:	2201      	movs	r2, #1
 80002b2:	4619      	mov	r1, r3
 80002b4:	69f8      	ldr	r0, [r7, #28]
 80002b6:	f002 fbd1 	bl	8002a5c <HAL_GPIO_WritePin>
		_last_requested = x;
 80002ba:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t+0xb4>)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	7013      	strb	r3, [r2, #0]
		break;
 80002c0:	bf00      	nop
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000028 	.word	0x20000028

080002d0 <_ZN5SPX2419getCurrentSetSensorEv>:

SPX24::PARAMETER SPX24::getCurrentSetSensor(){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	return _last_requested;
 80002d4:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <_ZN5SPX2419getCurrentSetSensorEv+0x14>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000028 	.word	0x20000028

080002e8 <HAL_GPIO_EXTI_Callback>:

/**
* Awaiting DR interrupt to begin ADC reading.
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == DR_Pin) {
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d109      	bne.n	800030c <HAL_GPIO_EXTI_Callback+0x24>
	// Trigger can be disabled now.
    HAL_GPIO_WritePin(TRG_GPIO_Port, TRG_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002fe:	4806      	ldr	r0, [pc, #24]	@ (8000318 <HAL_GPIO_EXTI_Callback+0x30>)
 8000300:	f002 fbac 	bl	8002a5c <HAL_GPIO_WritePin>
    // Read data using interrupt
    HAL_ADC_Start_IT(&hadc1);
 8000304:	4805      	ldr	r0, [pc, #20]	@ (800031c <HAL_GPIO_EXTI_Callback+0x34>)
 8000306:	f000 ff07 	bl	8001118 <HAL_ADC_Start_IT>
  } else {
      __NOP();
  }
}
 800030a:	e000      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x26>
      __NOP();
 800030c:	bf00      	nop
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	48000800 	.word	0x48000800
 800031c:	2000002c 	.word	0x2000002c

08000320 <HAL_ADC_ConvCpltCallback>:
*
* Pass the value read to the corresponding variable and set the next requested value.
* Set's up sensor pins.
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af04      	add	r7, sp, #16
 8000326:	6078      	str	r0, [r7, #4]
  SPX24::PARAMETER requested = SPX24::getCurrentSetSensor();
 8000328:	f7ff ffd2 	bl	80002d0 <_ZN5SPX2419getCurrentSetSensorEv>
 800032c:	4603      	mov	r3, r0
 800032e:	73fb      	strb	r3, [r7, #15]
  switch(requested){
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d018      	beq.n	8000368 <HAL_ADC_ConvCpltCallback+0x48>
 8000336:	2b02      	cmp	r3, #2
 8000338:	dc1f      	bgt.n	800037a <HAL_ADC_ConvCpltCallback+0x5a>
 800033a:	2b00      	cmp	r3, #0
 800033c:	d002      	beq.n	8000344 <HAL_ADC_ConvCpltCallback+0x24>
 800033e:	2b01      	cmp	r3, #1
 8000340:	d009      	beq.n	8000356 <HAL_ADC_ConvCpltCallback+0x36>
 8000342:	e01a      	b.n	800037a <HAL_ADC_ConvCpltCallback+0x5a>
  case SPX24::PARAMETER::MOISTURE:
	  moisture = HAL_ADC_GetValue(&hadc1);
 8000344:	4816      	ldr	r0, [pc, #88]	@ (80003a0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000346:	f001 f83f 	bl	80013c8 <HAL_ADC_GetValue>
 800034a:	4603      	mov	r3, r0
 800034c:	4a15      	ldr	r2, [pc, #84]	@ (80003a4 <HAL_ADC_ConvCpltCallback+0x84>)
 800034e:	6013      	str	r3, [r2, #0]
	  requested = SPX24::PARAMETER::PH;
 8000350:	2301      	movs	r3, #1
 8000352:	73fb      	strb	r3, [r7, #15]
	  break;
 8000354:	e011      	b.n	800037a <HAL_ADC_ConvCpltCallback+0x5a>

  case SPX24::PARAMETER::PH:
  	  ph = HAL_ADC_GetValue(&hadc1);
 8000356:	4812      	ldr	r0, [pc, #72]	@ (80003a0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000358:	f001 f836 	bl	80013c8 <HAL_ADC_GetValue>
 800035c:	4603      	mov	r3, r0
 800035e:	4a12      	ldr	r2, [pc, #72]	@ (80003a8 <HAL_ADC_ConvCpltCallback+0x88>)
 8000360:	6013      	str	r3, [r2, #0]
  	  requested = SPX24::PARAMETER::TEMPERATURE;
 8000362:	2302      	movs	r3, #2
 8000364:	73fb      	strb	r3, [r7, #15]
  	  break;
 8000366:	e008      	b.n	800037a <HAL_ADC_ConvCpltCallback+0x5a>

	case SPX24::PARAMETER::TEMPERATURE:
	  temperature = HAL_ADC_GetValue(&hadc1);
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <HAL_ADC_ConvCpltCallback+0x80>)
 800036a:	f001 f82d 	bl	80013c8 <HAL_ADC_GetValue>
 800036e:	4603      	mov	r3, r0
 8000370:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <HAL_ADC_ConvCpltCallback+0x8c>)
 8000372:	6013      	str	r3, [r2, #0]
	  requested = SPX24::PARAMETER::MOISTURE;
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]
	  break;
 8000378:	bf00      	nop
  }
  SPX24::readSensor(requested, CTRL0_GPIO_Port, CTRL0_Pin, CTRL1_GPIO_Port, CTRL1_Pin, TRG_GPIO_Port, TRG_Pin);
 800037a:	7bf8      	ldrb	r0, [r7, #15]
 800037c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000380:	9302      	str	r3, [sp, #8]
 8000382:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <HAL_ADC_ConvCpltCallback+0x90>)
 800038e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000392:	4907      	ldr	r1, [pc, #28]	@ (80003b0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000394:	f7ff ff40 	bl	8000218 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	20000098 	.word	0x20000098
 80003a8:	2000009c 	.word	0x2000009c
 80003ac:	200000a0 	.word	0x200000a0
 80003b0:	48000800 	.word	0x48000800

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 fa40 	bl	800083e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f817 	bl	80003f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f8e5 	bl	8000590 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80003c6:	f000 f85d 	bl	8000484 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  // Start sensors reading.
  // Needs to be started manually only once.
  SPX24::readSensor(SPX24::MOISTURE, CTRL0_GPIO_Port, CTRL0_Pin, CTRL1_GPIO_Port, CTRL1_Pin, TRG_GPIO_Port, TRG_Pin);
 80003ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003ce:	9302      	str	r3, [sp, #8]
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <main+0x38>)
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	4b04      	ldr	r3, [pc, #16]	@ (80003ec <main+0x38>)
 80003dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003e0:	4902      	ldr	r1, [pc, #8]	@ (80003ec <main+0x38>)
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff ff18 	bl	8000218 <_ZN5SPX2410readSensorENS_9PARAMETEREP12GPIO_TypeDeftS2_tS2_t>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <main+0x34>
 80003ec:	48000800 	.word	0x48000800

080003f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b094      	sub	sp, #80	@ 0x50
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0318 	add.w	r3, r7, #24
 80003fa:	2238      	movs	r2, #56	@ 0x38
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f003 fb54 	bl	8003aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000412:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000416:	f002 fb51 	bl	8002abc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041a:	2302      	movs	r3, #2
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000422:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	2340      	movs	r3, #64	@ 0x40
 8000426:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000428:	2300      	movs	r3, #0
 800042a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f002 fbf7 	bl	8002c24 <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	bf14      	ite	ne
 800043c:	2301      	movne	r3, #1
 800043e:	2300      	moveq	r3, #0
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000446:	f000 f8f9 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800044e:	2301      	movs	r3, #1
 8000450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fef0 	bl	8003248 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	bf14      	ite	ne
 800046e:	2301      	movne	r3, #1
 8000470:	2300      	moveq	r3, #0
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000478:	f000 f8e0 	bl	800063c <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3750      	adds	r7, #80	@ 0x50
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	@ 0x30
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800048a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2220      	movs	r2, #32
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f003 fb05 	bl	8003aac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a2:	4b39      	ldr	r3, [pc, #228]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004aa:	4b37      	ldr	r3, [pc, #220]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80004b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004b2:	4b35      	ldr	r3, [pc, #212]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b8:	4b33      	ldr	r3, [pc, #204]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80004be:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c4:	4b30      	ldr	r3, [pc, #192]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004cc:	2204      	movs	r2, #4
 80004ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004d8:	2200      	movs	r2, #0
 80004da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80004dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004de:	2201      	movs	r2, #1
 80004e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e2:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ea:	4b27      	ldr	r3, [pc, #156]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f0:	4b25      	ldr	r3, [pc, #148]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004f6:	4b24      	ldr	r3, [pc, #144]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004fe:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 8000500:	2200      	movs	r2, #0
 8000502:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000504:	4b20      	ldr	r3, [pc, #128]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 8000506:	2200      	movs	r2, #0
 8000508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800050c:	481e      	ldr	r0, [pc, #120]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 800050e:	f000 fc47 	bl	8000da0 <HAL_ADC_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8000522:	f000 f88b 	bl	800063c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000526:	2300      	movs	r3, #0
 8000528:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052e:	4619      	mov	r1, r3
 8000530:	4815      	ldr	r0, [pc, #84]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 8000532:	f001 fef9 	bl	8002328 <HAL_ADCEx_MultiModeConfigChannel>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8000546:	f000 f879 	bl	800063c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <_ZL12MX_ADC1_Initv+0x108>)
 800054c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054e:	2306      	movs	r3, #6
 8000550:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000556:	237f      	movs	r3, #127	@ 0x7f
 8000558:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800055a:	2304      	movs	r3, #4
 800055c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4619      	mov	r1, r3
 8000566:	4808      	ldr	r0, [pc, #32]	@ (8000588 <_ZL12MX_ADC1_Initv+0x104>)
 8000568:	f001 f9b0 	bl	80018cc <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	bf14      	ite	ne
 8000572:	2301      	movne	r3, #1
 8000574:	2300      	moveq	r3, #0
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800057c:	f000 f85e 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	3730      	adds	r7, #48	@ 0x30
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000002c 	.word	0x2000002c
 800058c:	04300002 	.word	0x04300002

08000590 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <_ZL12MX_GPIO_Initv+0xa4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a22      	ldr	r2, [pc, #136]	@ (8000634 <_ZL12MX_GPIO_Initv+0xa4>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <_ZL12MX_GPIO_Initv+0xa4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <_ZL12MX_GPIO_Initv+0xa4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000634 <_ZL12MX_GPIO_Initv+0xa4>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <_ZL12MX_GPIO_Initv+0xa4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CTRL0_Pin|CTRL1_Pin|TRG_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <_ZL12MX_GPIO_Initv+0xa8>)
 80005de:	f002 fa3d 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CTRL0_Pin CTRL1_Pin TRG_Pin */
  GPIO_InitStruct.Pin = CTRL0_Pin|CTRL1_Pin|TRG_Pin;
 80005e2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480f      	ldr	r0, [pc, #60]	@ (8000638 <_ZL12MX_GPIO_Initv+0xa8>)
 80005fc:	f002 f8ac 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : DR_Pin */
  GPIO_InitStruct.Pin = DR_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000604:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DR_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	4808      	ldr	r0, [pc, #32]	@ (8000638 <_ZL12MX_GPIO_Initv+0xa8>)
 8000616:	f002 f89f 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2006      	movs	r0, #6
 8000620:	f002 f865 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000624:	2006      	movs	r0, #6
 8000626:	f002 f87c 	bl	8002722 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	48000800 	.word	0x48000800

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <Error_Handler+0x8>

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_MspInit+0x44>)
 8000650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <HAL_MspInit+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6613      	str	r3, [r2, #96]	@ 0x60
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <HAL_MspInit+0x44>)
 800065c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <HAL_MspInit+0x44>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066a:	4a08      	ldr	r2, [pc, #32]	@ (800068c <HAL_MspInit+0x44>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000670:	6593      	str	r3, [r2, #88]	@ 0x58
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <HAL_MspInit+0x44>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800067e:	f002 fac1 	bl	8002c04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	@ 0x78
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	2254      	movs	r2, #84	@ 0x54
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 f9fb 	bl	8003aac <memset>
  if(hadc->Instance==ADC1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006be:	d13c      	bne.n	800073a <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006ca:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 ff9d 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006dc:	f7ff ffae 	bl	800063c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <HAL_ADC_MspInit+0xb4>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <HAL_ADC_MspInit+0xb4>)
 80006e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ec:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_ADC_MspInit+0xb4>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <HAL_ADC_MspInit+0xb4>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <HAL_ADC_MspInit+0xb4>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <HAL_ADC_MspInit+0xb4>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000710:	2301      	movs	r3, #1
 8000712:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000714:	2303      	movs	r3, #3
 8000716:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000720:	4619      	mov	r1, r3
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f002 f817 	bl	8002758 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2012      	movs	r0, #18
 8000730:	f001 ffdd 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000734:	2012      	movs	r0, #18
 8000736:	f001 fff4 	bl	8002722 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800073a:	bf00      	nop
 800073c:	3778      	adds	r7, #120	@ 0x78
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <NMI_Handler+0x4>

08000750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <MemManage_Handler+0x4>

08000760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <UsageFault_Handler+0x4>

08000770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079e:	f000 f8a1 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DR_Pin);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f002 f96e 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007b8:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <ADC1_2_IRQHandler+0x10>)
 80007ba:	f000 fe13 	bl	80013e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000002c 	.word	0x2000002c

080007c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ec:	480d      	ldr	r0, [pc, #52]	@ (8000824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f0:	f7ff ffea 	bl	80007c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	@ (800082c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000830 <LoopForever+0xe>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	@ (8000838 <LoopForever+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081a:	f003 f94f 	bl	8003abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081e:	f7ff fdc9 	bl	80003b4 <main>

08000822 <LoopForever>:

LoopForever:
    b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   r0, =_estack
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000830:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8000834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000838:	200000a8 	.word	0x200000a8

0800083c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC3_IRQHandler>

0800083e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000844:	2300      	movs	r3, #0
 8000846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f001 ff45 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084e:	200f      	movs	r0, #15
 8000850:	f000 f80e 	bl	8000870 <HAL_InitTick>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	e001      	b.n	8000864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000860:	f7ff fef2 	bl	8000648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000864:	79fb      	ldrb	r3, [r7, #7]

}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <HAL_InitTick+0x68>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d022      	beq.n	80008ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_InitTick+0x6c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <HAL_InitTick+0x68>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000890:	fbb1 f3f3 	udiv	r3, r1, r3
 8000894:	fbb2 f3f3 	udiv	r3, r2, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f001 ff50 	bl	800273e <HAL_SYSTICK_Config>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10f      	bne.n	80008c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	d809      	bhi.n	80008be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008aa:	2200      	movs	r2, #0
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295
 80008b2:	f001 ff1c 	bl	80026ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_InitTick+0x70>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	e007      	b.n	80008ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	e004      	b.n	80008ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	e001      	b.n	80008ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x1c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x20>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a03      	ldr	r2, [pc, #12]	@ (8000900 <HAL_IncTick+0x1c>)
 80008f4:	6013      	str	r3, [r2, #0]
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	200000a4 	.word	0x200000a4
 8000904:	20000008 	.word	0x20000008

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b03      	ldr	r3, [pc, #12]	@ (800091c <HAL_GetTick+0x14>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200000a4 	.word	0x200000a4

08000920 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	431a      	orrs	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	609a      	str	r2, [r3, #8]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	609a      	str	r2, [r3, #8]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3360      	adds	r3, #96	@ 0x60
 800099a:	461a      	mov	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <LL_ADC_SetOffset+0x44>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	4313      	orrs	r3, r2
 80009b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80009c0:	bf00      	nop
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	03fff000 	.word	0x03fff000

080009d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3360      	adds	r3, #96	@ 0x60
 80009de:	461a      	mov	r2, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3360      	adds	r3, #96	@ 0x60
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	431a      	orrs	r2, r3
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a26:	bf00      	nop
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b087      	sub	sp, #28
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3360      	adds	r3, #96	@ 0x60
 8000a42:	461a      	mov	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000a5c:	bf00      	nop
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3360      	adds	r3, #96	@ 0x60
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	615a      	str	r2, [r3, #20]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e000      	b.n	8000ade <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b087      	sub	sp, #28
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3330      	adds	r3, #48	@ 0x30
 8000afa:	461a      	mov	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	4413      	add	r3, r2
 8000b08:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	211f      	movs	r1, #31
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0e9b      	lsrs	r3, r3, #26
 8000b22:	f003 011f 	and.w	r1, r3, #31
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	f003 031f 	and.w	r3, r3, #31
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	431a      	orrs	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b36:	bf00      	nop
 8000b38:	371c      	adds	r7, #28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3314      	adds	r3, #20
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	0e5b      	lsrs	r3, r3, #25
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	0d1b      	lsrs	r3, r3, #20
 8000b90:	f003 031f 	and.w	r3, r3, #31
 8000b94:	2107      	movs	r1, #7
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	0d1b      	lsrs	r3, r3, #20
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0318 	and.w	r3, r3, #24
 8000be2:	4908      	ldr	r1, [pc, #32]	@ (8000c04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000be4:	40d9      	lsrs	r1, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	400b      	ands	r3, r1
 8000bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	0007ffff 	.word	0x0007ffff

08000c08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f003 031f 	and.w	r3, r3, #31
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000c50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6093      	str	r3, [r2, #8]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c78:	d101      	bne.n	8000c7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000c9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ca0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000cc8:	d101      	bne.n	8000cce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000cec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cf0:	f043 0201 	orr.w	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <LL_ADC_IsEnabled+0x18>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <LL_ADC_IsEnabled+0x1a>
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d3e:	f043 0204 	orr.w	r2, r3, #4
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d101      	bne.n	8000d6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d101      	bne.n	8000d90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e1a9      	b.n	800110e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d109      	bne.n	8000ddc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fc61 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff3f 	bl	8000c64 <LL_ADC_IsDeepPowerDownEnabled>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff25 	bl	8000c40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff5a 	bl	8000cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d115      	bne.n	8000e32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff3e 	bl	8000c8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e10:	4b9c      	ldr	r3, [pc, #624]	@ (8001084 <HAL_ADC_Init+0x2e4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	099b      	lsrs	r3, r3, #6
 8000e16:	4a9c      	ldr	r2, [pc, #624]	@ (8001088 <HAL_ADC_Init+0x2e8>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	099b      	lsrs	r3, r3, #6
 8000e1e:	3301      	adds	r3, #1
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e24:	e002      	b.n	8000e2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff3c 	bl	8000cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10d      	bne.n	8000e5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e46:	f043 0210 	orr.w	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff75 	bl	8000d52 <LL_ADC_REG_IsConversionOngoing>
 8000e68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 8142 	bne.w	80010fc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 813e 	bne.w	80010fc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e88:	f043 0202 	orr.w	r2, r3, #2
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff35 	bl	8000d04 <LL_ADC_IsEnabled>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d141      	bne.n	8000f24 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ea8:	d004      	beq.n	8000eb4 <HAL_ADC_Init+0x114>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a77      	ldr	r2, [pc, #476]	@ (800108c <HAL_ADC_Init+0x2ec>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d10f      	bne.n	8000ed4 <HAL_ADC_Init+0x134>
 8000eb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000eb8:	f7ff ff24 	bl	8000d04 <LL_ADC_IsEnabled>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	4873      	ldr	r0, [pc, #460]	@ (800108c <HAL_ADC_Init+0x2ec>)
 8000ec0:	f7ff ff20 	bl	8000d04 <LL_ADC_IsEnabled>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4323      	orrs	r3, r4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	e012      	b.n	8000efa <HAL_ADC_Init+0x15a>
 8000ed4:	486e      	ldr	r0, [pc, #440]	@ (8001090 <HAL_ADC_Init+0x2f0>)
 8000ed6:	f7ff ff15 	bl	8000d04 <LL_ADC_IsEnabled>
 8000eda:	4604      	mov	r4, r0
 8000edc:	486d      	ldr	r0, [pc, #436]	@ (8001094 <HAL_ADC_Init+0x2f4>)
 8000ede:	f7ff ff11 	bl	8000d04 <LL_ADC_IsEnabled>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	431c      	orrs	r4, r3
 8000ee6:	486c      	ldr	r0, [pc, #432]	@ (8001098 <HAL_ADC_Init+0x2f8>)
 8000ee8:	f7ff ff0c 	bl	8000d04 <LL_ADC_IsEnabled>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf0c      	ite	eq
 8000ef4:	2301      	moveq	r3, #1
 8000ef6:	2300      	movne	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d012      	beq.n	8000f24 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f06:	d004      	beq.n	8000f12 <HAL_ADC_Init+0x172>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a5f      	ldr	r2, [pc, #380]	@ (800108c <HAL_ADC_Init+0x2ec>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_Init+0x176>
 8000f12:	4a62      	ldr	r2, [pc, #392]	@ (800109c <HAL_ADC_Init+0x2fc>)
 8000f14:	e000      	b.n	8000f18 <HAL_ADC_Init+0x178>
 8000f16:	4a62      	ldr	r2, [pc, #392]	@ (80010a0 <HAL_ADC_Init+0x300>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f7ff fcfe 	bl	8000920 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7f5b      	ldrb	r3, [r3, #29]
 8000f28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000f34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000f3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d106      	bne.n	8000f60 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f56:	3b01      	subs	r3, #1
 8000f58:	045b      	lsls	r3, r3, #17
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d009      	beq.n	8000f7c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	4b48      	ldr	r3, [pc, #288]	@ (80010a4 <HAL_ADC_Init+0x304>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fee4 	bl	8000d78 <LL_ADC_INJ_IsConversionOngoing>
 8000fb0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d17f      	bne.n	80010b8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d17c      	bne.n	80010b8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fc2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fda:	f023 0302 	bic.w	r3, r3, #2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d017      	beq.n	8001020 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ffe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001008:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800100c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6911      	ldr	r1, [r2, #16]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	430b      	orrs	r3, r1
 800101a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800101e:	e013      	b.n	8001048 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800102e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001044:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800104e:	2b01      	cmp	r3, #1
 8001050:	d12a      	bne.n	80010a8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001068:	4311      	orrs	r1, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800106e:	4311      	orrs	r1, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001074:	430a      	orrs	r2, r1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0201 	orr.w	r2, r2, #1
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	e019      	b.n	80010b8 <HAL_ADC_Init+0x318>
 8001084:	20000000 	.word	0x20000000
 8001088:	053e2d63 	.word	0x053e2d63
 800108c:	50000100 	.word	0x50000100
 8001090:	50000400 	.word	0x50000400
 8001094:	50000500 	.word	0x50000500
 8001098:	50000600 	.word	0x50000600
 800109c:	50000300 	.word	0x50000300
 80010a0:	50000700 	.word	0x50000700
 80010a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10c      	bne.n	80010da <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f023 010f 	bic.w	r1, r3, #15
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80010d8:	e007      	b.n	80010ea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 020f 	bic.w	r2, r2, #15
 80010e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	f043 0201 	orr.w	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010fa:	e007      	b.n	800110c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001100:	f043 0210 	orr.w	r2, r3, #16
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800110c:	7ffb      	ldrb	r3, [r7, #31]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	bf00      	nop

08001118 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001128:	d004      	beq.n	8001134 <HAL_ADC_Start_IT+0x1c>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a92      	ldr	r2, [pc, #584]	@ (8001378 <HAL_ADC_Start_IT+0x260>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_ADC_Start_IT+0x20>
 8001134:	4b91      	ldr	r3, [pc, #580]	@ (800137c <HAL_ADC_Start_IT+0x264>)
 8001136:	e000      	b.n	800113a <HAL_ADC_Start_IT+0x22>
 8001138:	4b91      	ldr	r3, [pc, #580]	@ (8001380 <HAL_ADC_Start_IT+0x268>)
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fd64 	bl	8000c08 <LL_ADC_GetMultimode>
 8001140:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fe03 	bl	8000d52 <LL_ADC_REG_IsConversionOngoing>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 8132 	bne.w	80013b8 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Start_IT+0x4a>
 800115e:	2302      	movs	r3, #2
 8001160:	e12d      	b.n	80013be <HAL_ADC_Start_IT+0x2a6>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 ffee 	bl	800214c <ADC_Enable>
 8001170:	4603      	mov	r3, r0
 8001172:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 8119 	bne.w	80013ae <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001180:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a78      	ldr	r2, [pc, #480]	@ (8001378 <HAL_ADC_Start_IT+0x260>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d009      	beq.n	80011ae <HAL_ADC_Start_IT+0x96>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a79      	ldr	r2, [pc, #484]	@ (8001384 <HAL_ADC_Start_IT+0x26c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d002      	beq.n	80011aa <HAL_ADC_Start_IT+0x92>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e003      	b.n	80011b2 <HAL_ADC_Start_IT+0x9a>
 80011aa:	4b77      	ldr	r3, [pc, #476]	@ (8001388 <HAL_ADC_Start_IT+0x270>)
 80011ac:	e001      	b.n	80011b2 <HAL_ADC_Start_IT+0x9a>
 80011ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d002      	beq.n	80011c0 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d105      	bne.n	80011cc <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011dc:	f023 0206 	bic.w	r2, r3, #6
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80011e4:	e002      	b.n	80011ec <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	221c      	movs	r2, #28
 80011f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 021c 	bic.w	r2, r2, #28
 800120a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	2b08      	cmp	r3, #8
 8001212:	d108      	bne.n	8001226 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0208 	orr.w	r2, r2, #8
 8001222:	605a      	str	r2, [r3, #4]
          break;
 8001224:	e008      	b.n	8001238 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	605a      	str	r2, [r3, #4]
          break;
 8001236:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0210 	orr.w	r2, r2, #16
 800124e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a48      	ldr	r2, [pc, #288]	@ (8001378 <HAL_ADC_Start_IT+0x260>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d009      	beq.n	800126e <HAL_ADC_Start_IT+0x156>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a49      	ldr	r2, [pc, #292]	@ (8001384 <HAL_ADC_Start_IT+0x26c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d002      	beq.n	800126a <HAL_ADC_Start_IT+0x152>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	e003      	b.n	8001272 <HAL_ADC_Start_IT+0x15a>
 800126a:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_ADC_Start_IT+0x270>)
 800126c:	e001      	b.n	8001272 <HAL_ADC_Start_IT+0x15a>
 800126e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	4293      	cmp	r3, r2
 8001278:	d008      	beq.n	800128c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d002      	beq.n	800128c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b09      	cmp	r3, #9
 800128a:	d13a      	bne.n	8001302 <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d02d      	beq.n	80012f6 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800129e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d110      	bne.n	80012d4 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0220 	bic.w	r2, r2, #32
 80012c0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012d0:	605a      	str	r2, [r3, #4]
              break;
 80012d2:	e010      	b.n	80012f6 <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012e2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0220 	orr.w	r2, r2, #32
 80012f2:	605a      	str	r2, [r3, #4]
              break;
 80012f4:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fd15 	bl	8000d2a <LL_ADC_REG_StartConversion>
 8001300:	e05c      	b.n	80013bc <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001306:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a19      	ldr	r2, [pc, #100]	@ (8001378 <HAL_ADC_Start_IT+0x260>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d009      	beq.n	800132c <HAL_ADC_Start_IT+0x214>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <HAL_ADC_Start_IT+0x26c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d002      	beq.n	8001328 <HAL_ADC_Start_IT+0x210>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	e003      	b.n	8001330 <HAL_ADC_Start_IT+0x218>
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_ADC_Start_IT+0x270>)
 800132a:	e001      	b.n	8001330 <HAL_ADC_Start_IT+0x218>
 800132c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001330:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d03e      	beq.n	80013bc <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001342:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001346:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11a      	bne.n	800138c <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0220 	bic.w	r2, r2, #32
 8001364:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001374:	605a      	str	r2, [r3, #4]
              break;
 8001376:	e021      	b.n	80013bc <HAL_ADC_Start_IT+0x2a4>
 8001378:	50000100 	.word	0x50000100
 800137c:	50000300 	.word	0x50000300
 8001380:	50000700 	.word	0x50000700
 8001384:	50000500 	.word	0x50000500
 8001388:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800139a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0220 	orr.w	r2, r2, #32
 80013aa:	605a      	str	r2, [r3, #4]
              break;
 80013ac:	e006      	b.n	80013bc <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80013b6:	e001      	b.n	80013bc <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013b8:	2302      	movs	r3, #2
 80013ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop

080013c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001408:	d004      	beq.n	8001414 <HAL_ADC_IRQHandler+0x30>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a8e      	ldr	r2, [pc, #568]	@ (8001648 <HAL_ADC_IRQHandler+0x264>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_ADC_IRQHandler+0x34>
 8001414:	4b8d      	ldr	r3, [pc, #564]	@ (800164c <HAL_ADC_IRQHandler+0x268>)
 8001416:	e000      	b.n	800141a <HAL_ADC_IRQHandler+0x36>
 8001418:	4b8d      	ldr	r3, [pc, #564]	@ (8001650 <HAL_ADC_IRQHandler+0x26c>)
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fbf4 	bl	8000c08 <LL_ADC_GetMultimode>
 8001420:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <HAL_ADC_IRQHandler+0x78>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d012      	beq.n	800145c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001446:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 ff60 	bl	8002314 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2202      	movs	r2, #2
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <HAL_ADC_IRQHandler+0x8c>
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10b      	bne.n	8001488 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8094 	beq.w	80015a4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 808e 	beq.w	80015a4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001498:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fb0d 	bl	8000ac4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d072      	beq.n	8001596 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a64      	ldr	r2, [pc, #400]	@ (8001648 <HAL_ADC_IRQHandler+0x264>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d009      	beq.n	80014ce <HAL_ADC_IRQHandler+0xea>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a65      	ldr	r2, [pc, #404]	@ (8001654 <HAL_ADC_IRQHandler+0x270>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d002      	beq.n	80014ca <HAL_ADC_IRQHandler+0xe6>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	e003      	b.n	80014d2 <HAL_ADC_IRQHandler+0xee>
 80014ca:	4b63      	ldr	r3, [pc, #396]	@ (8001658 <HAL_ADC_IRQHandler+0x274>)
 80014cc:	e001      	b.n	80014d2 <HAL_ADC_IRQHandler+0xee>
 80014ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d008      	beq.n	80014ec <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d002      	beq.n	80014ec <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d104      	bne.n	80014f6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	e014      	b.n	8001520 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a53      	ldr	r2, [pc, #332]	@ (8001648 <HAL_ADC_IRQHandler+0x264>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d009      	beq.n	8001514 <HAL_ADC_IRQHandler+0x130>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a53      	ldr	r2, [pc, #332]	@ (8001654 <HAL_ADC_IRQHandler+0x270>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d002      	beq.n	8001510 <HAL_ADC_IRQHandler+0x12c>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	e003      	b.n	8001518 <HAL_ADC_IRQHandler+0x134>
 8001510:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <HAL_ADC_IRQHandler+0x274>)
 8001512:	e001      	b.n	8001518 <HAL_ADC_IRQHandler+0x134>
 8001514:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001518:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d135      	bne.n	8001596 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b08      	cmp	r3, #8
 8001536:	d12e      	bne.n	8001596 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc08 	bl	8000d52 <LL_ADC_REG_IsConversionOngoing>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11a      	bne.n	800157e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 020c 	bic.w	r2, r2, #12
 8001556:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d112      	bne.n	8001596 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800157c:	e00b      	b.n	8001596 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe fec2 	bl	8000320 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	220c      	movs	r2, #12
 80015a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <HAL_ADC_IRQHandler+0x1d4>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80b3 	beq.w	800172a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80ad 	beq.w	800172a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff faa8 	bl	8000b42 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80015f2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fa63 	bl	8000ac4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015fe:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_ADC_IRQHandler+0x264>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d009      	beq.n	800161e <HAL_ADC_IRQHandler+0x23a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a11      	ldr	r2, [pc, #68]	@ (8001654 <HAL_ADC_IRQHandler+0x270>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d002      	beq.n	800161a <HAL_ADC_IRQHandler+0x236>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	e003      	b.n	8001622 <HAL_ADC_IRQHandler+0x23e>
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_ADC_IRQHandler+0x274>)
 800161c:	e001      	b.n	8001622 <HAL_ADC_IRQHandler+0x23e>
 800161e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	4293      	cmp	r3, r2
 8001628:	d008      	beq.n	800163c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b06      	cmp	r3, #6
 8001634:	d002      	beq.n	800163c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b07      	cmp	r3, #7
 800163a:	d10f      	bne.n	800165c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	e01f      	b.n	8001686 <HAL_ADC_IRQHandler+0x2a2>
 8001646:	bf00      	nop
 8001648:	50000100 	.word	0x50000100
 800164c:	50000300 	.word	0x50000300
 8001650:	50000700 	.word	0x50000700
 8001654:	50000500 	.word	0x50000500
 8001658:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a8b      	ldr	r2, [pc, #556]	@ (8001890 <HAL_ADC_IRQHandler+0x4ac>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_ADC_IRQHandler+0x296>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a8a      	ldr	r2, [pc, #552]	@ (8001894 <HAL_ADC_IRQHandler+0x4b0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d002      	beq.n	8001676 <HAL_ADC_IRQHandler+0x292>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	e003      	b.n	800167e <HAL_ADC_IRQHandler+0x29a>
 8001676:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_ADC_IRQHandler+0x4b4>)
 8001678:	e001      	b.n	800167e <HAL_ADC_IRQHandler+0x29a>
 800167a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800167e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d047      	beq.n	800171c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x2c2>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03f      	beq.n	800171c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d13a      	bne.n	800171c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b0:	2b40      	cmp	r3, #64	@ 0x40
 80016b2:	d133      	bne.n	800171c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d12e      	bne.n	800171c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb58 	bl	8000d78 <LL_ADC_INJ_IsConversionOngoing>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11a      	bne.n	8001704 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80016dc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d112      	bne.n	800171c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001702:	e00b      	b.n	800171c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fdd1 	bl	80022c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2260      	movs	r2, #96	@ 0x60
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001730:	2b00      	cmp	r3, #0
 8001732:	d011      	beq.n	8001758 <HAL_ADC_IRQHandler+0x374>
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00c      	beq.n	8001758 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001742:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f8aa 	bl	80018a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2280      	movs	r2, #128	@ 0x80
 8001756:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d012      	beq.n	8001788 <HAL_ADC_IRQHandler+0x3a4>
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001770:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fdb7 	bl	80022ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001786:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800178e:	2b00      	cmp	r3, #0
 8001790:	d012      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x3d4>
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00d      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fda9 	bl	8002300 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d043      	beq.n	800184a <HAL_ADC_IRQHandler+0x466>
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d03e      	beq.n	800184a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80017d4:	2301      	movs	r3, #1
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d8:	e021      	b.n	800181e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e8:	d004      	beq.n	80017f4 <HAL_ADC_IRQHandler+0x410>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a28      	ldr	r2, [pc, #160]	@ (8001890 <HAL_ADC_IRQHandler+0x4ac>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x414>
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <HAL_ADC_IRQHandler+0x4b8>)
 80017f6:	e000      	b.n	80017fa <HAL_ADC_IRQHandler+0x416>
 80017f8:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <HAL_ADC_IRQHandler+0x4bc>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fa12 	bl	8000c24 <LL_ADC_GetMultiDMATransfer>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
 800180a:	e008      	b.n	800181e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10e      	bne.n	8001842 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001828:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001834:	f043 0202 	orr.w	r2, r3, #2
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f83b 	bl	80018b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2210      	movs	r2, #16
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d018      	beq.n	8001886 <HAL_ADC_IRQHandler+0x4a2>
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185a:	2b00      	cmp	r3, #0
 800185c:	d013      	beq.n	8001886 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001862:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186e:	f043 0208 	orr.w	r2, r3, #8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fd29 	bl	80022d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	@ 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	50000100 	.word	0x50000100
 8001894:	50000500 	.word	0x50000500
 8001898:	50000400 	.word	0x50000400
 800189c:	50000300 	.word	0x50000300
 80018a0:	50000700 	.word	0x50000700

080018a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0b6      	sub	sp, #216	@ 0xd8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x24>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f000 bc13 	b.w	8002116 <HAL_ADC_ConfigChannel+0x84a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fa28 	bl	8000d52 <LL_ADC_REG_IsConversionOngoing>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 83f3 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	f7ff f8e7 	bl	8000aea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fa16 	bl	8000d52 <LL_ADC_REG_IsConversionOngoing>
 8001926:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fa22 	bl	8000d78 <LL_ADC_INJ_IsConversionOngoing>
 8001934:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001938:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800193c:	2b00      	cmp	r3, #0
 800193e:	f040 81d9 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 81d4 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001954:	d10f      	bne.n	8001976 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f901 	bl	8000b68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f895 	bl	8000a9e <LL_ADC_SetSamplingTimeCommonConfig>
 8001974:	e00e      	b.n	8001994 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	461a      	mov	r2, r3
 8001984:	f7ff f8f0 	bl	8000b68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f885 	bl	8000a9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d022      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6919      	ldr	r1, [r3, #16]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019c6:	f7fe ffdf 	bl	8000988 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f7ff f82b 	bl	8000a32 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x126>
 80019ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019f0:	e000      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x128>
 80019f2:	2300      	movs	r3, #0
 80019f4:	461a      	mov	r2, r3
 80019f6:	f7ff f837 	bl	8000a68 <LL_ADC_SetOffsetSaturation>
 80019fa:	e17b      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe ffe4 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x15c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe ffd9 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	f003 021f 	and.w	r2, r3, #31
 8001a26:	e01e      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x19a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe ffce 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a56:	2320      	movs	r3, #32
 8001a58:	e004      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x1b2>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0e9b      	lsrs	r3, r3, #26
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	e018      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1e4>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e004      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe ff9d 	bl	80009fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe ff81 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x222>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe ff76 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	e01e      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x260>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2101      	movs	r1, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe ff6b 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e004      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x278>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	e018      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x2aa>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e004      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe ff3a 	bl	80009fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe ff1e 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x2e8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe ff13 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	e01e      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x326>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ff08 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x33e>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	e016      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x36c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001c1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e004      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d106      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fed9 	bl	80009fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe febd 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x3aa>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2103      	movs	r1, #3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe feb2 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	e017      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x3da>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fea7 	bl	80009d0 <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c90:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x3f2>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	e011      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x416>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e003      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2103      	movs	r1, #3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fe84 	bl	80009fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f803 	bl	8000d04 <LL_ADC_IsEnabled>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 813d 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f7fe ff54 	bl	8000bc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4aa2      	ldr	r2, [pc, #648]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x6dc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f040 812e 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10b      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x480>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e019      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x4b4>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e003      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	bf94      	ite	ls
 8001d7a:	2301      	movls	r3, #1
 8001d7c:	2300      	movhi	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d079      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x4d4>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	069b      	lsls	r3, r3, #26
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d9e:	e015      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x500>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001db0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	069b      	lsls	r3, r3, #26
 8001dc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x520>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	3301      	adds	r3, #1
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	e017      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x550>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2101      	movs	r1, #1
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	ea42 0103 	orr.w	r1, r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10a      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x576>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	051b      	lsls	r3, r3, #20
 8001e40:	e018      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x5a8>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e74:	430b      	orrs	r3, r1
 8001e76:	e07e      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x5c8>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	069b      	lsls	r3, r3, #26
 8001e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e92:	e015      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x5f4>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x614>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	e017      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x644>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	61fb      	str	r3, [r7, #28]
  return result;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e003      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	ea42 0103 	orr.w	r1, r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x670>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	e01b      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x6a8>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	613b      	str	r3, [r7, #16]
  return result;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f003 021f 	and.w	r2, r3, #31
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b1e      	subs	r3, #30
 8001f6e:	051b      	lsls	r3, r3, #20
 8001f70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fdf4 	bl	8000b68 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_ADC_ConfigChannel+0x6e0>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80be 	beq.w	800210a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x6d6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x6e4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x6ec>
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x6e8>)
 8001fa4:	e009      	b.n	8001fba <HAL_ADC_ConfigChannel+0x6ee>
 8001fa6:	bf00      	nop
 8001fa8:	407f0000 	.word	0x407f0000
 8001fac:	80080000 	.word	0x80080000
 8001fb0:	50000100 	.word	0x50000100
 8001fb4:	50000300 	.word	0x50000300
 8001fb8:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <HAL_ADC_ConfigChannel+0x854>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fcd6 	bl	800096c <LL_ADC_GetCommonPathInternalCh>
 8001fc0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a56      	ldr	r2, [pc, #344]	@ (8002124 <HAL_ADC_ConfigChannel+0x858>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x70c>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a55      	ldr	r2, [pc, #340]	@ (8002128 <HAL_ADC_ConfigChannel+0x85c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d13a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d134      	bne.n	800204e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fec:	d005      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x72e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a4e      	ldr	r2, [pc, #312]	@ (800212c <HAL_ADC_ConfigChannel+0x860>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	f040 8085 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002002:	d004      	beq.n	800200e <HAL_ADC_ConfigChannel+0x742>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a49      	ldr	r2, [pc, #292]	@ (8002130 <HAL_ADC_ConfigChannel+0x864>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x746>
 800200e:	4a49      	ldr	r2, [pc, #292]	@ (8002134 <HAL_ADC_ConfigChannel+0x868>)
 8002010:	e000      	b.n	8002014 <HAL_ADC_ConfigChannel+0x748>
 8002012:	4a43      	ldr	r2, [pc, #268]	@ (8002120 <HAL_ADC_ConfigChannel+0x854>)
 8002014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7fe fc91 	bl	8000946 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002024:	4b44      	ldr	r3, [pc, #272]	@ (8002138 <HAL_ADC_ConfigChannel+0x86c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	4a44      	ldr	r2, [pc, #272]	@ (800213c <HAL_ADC_ConfigChannel+0x870>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800203e:	e002      	b.n	8002046 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3b01      	subs	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f9      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800204c:	e05a      	b.n	8002104 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3b      	ldr	r2, [pc, #236]	@ (8002140 <HAL_ADC_ConfigChannel+0x874>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d125      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800205c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11f      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a31      	ldr	r2, [pc, #196]	@ (8002130 <HAL_ADC_ConfigChannel+0x864>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d104      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x7ac>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a34      	ldr	r2, [pc, #208]	@ (8002144 <HAL_ADC_ConfigChannel+0x878>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d047      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002080:	d004      	beq.n	800208c <HAL_ADC_ConfigChannel+0x7c0>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2a      	ldr	r2, [pc, #168]	@ (8002130 <HAL_ADC_ConfigChannel+0x864>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x7c4>
 800208c:	4a29      	ldr	r2, [pc, #164]	@ (8002134 <HAL_ADC_ConfigChannel+0x868>)
 800208e:	e000      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7c6>
 8002090:	4a23      	ldr	r2, [pc, #140]	@ (8002120 <HAL_ADC_ConfigChannel+0x854>)
 8002092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f7fe fc52 	bl	8000946 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a2:	e031      	b.n	8002108 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a27      	ldr	r2, [pc, #156]	@ (8002148 <HAL_ADC_ConfigChannel+0x87c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12d      	bne.n	800210a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d127      	bne.n	800210a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <HAL_ADC_ConfigChannel+0x864>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x80c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a17      	ldr	r2, [pc, #92]	@ (8002130 <HAL_ADC_ConfigChannel+0x864>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x810>
 80020d8:	4a16      	ldr	r2, [pc, #88]	@ (8002134 <HAL_ADC_ConfigChannel+0x868>)
 80020da:	e000      	b.n	80020de <HAL_ADC_ConfigChannel+0x812>
 80020dc:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <HAL_ADC_ConfigChannel+0x854>)
 80020de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020e6:	4619      	mov	r1, r3
 80020e8:	4610      	mov	r0, r2
 80020ea:	f7fe fc2c 	bl	8000946 <LL_ADC_SetCommonPathInternalCh>
 80020ee:	e00c      	b.n	800210a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002102:	e002      	b.n	800210a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002108:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002112:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002116:	4618      	mov	r0, r3
 8002118:	37d8      	adds	r7, #216	@ 0xd8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	50000700 	.word	0x50000700
 8002124:	c3210000 	.word	0xc3210000
 8002128:	90c00010 	.word	0x90c00010
 800212c:	50000600 	.word	0x50000600
 8002130:	50000100 	.word	0x50000100
 8002134:	50000300 	.word	0x50000300
 8002138:	20000000 	.word	0x20000000
 800213c:	053e2d63 	.word	0x053e2d63
 8002140:	c7520000 	.word	0xc7520000
 8002144:	50000500 	.word	0x50000500
 8002148:	cb840000 	.word	0xcb840000

0800214c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fdd1 	bl	8000d04 <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d176      	bne.n	8002256 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	4b3c      	ldr	r3, [pc, #240]	@ (8002260 <ADC_Enable+0x114>)
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e062      	b.n	8002258 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fda0 	bl	8000cdc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021a4:	d004      	beq.n	80021b0 <ADC_Enable+0x64>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002264 <ADC_Enable+0x118>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <ADC_Enable+0x68>
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <ADC_Enable+0x11c>)
 80021b2:	e000      	b.n	80021b6 <ADC_Enable+0x6a>
 80021b4:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <ADC_Enable+0x120>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fbd8 	bl	800096c <LL_ADC_GetCommonPathInternalCh>
 80021bc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d013      	beq.n	80021ee <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <ADC_Enable+0x124>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	4a29      	ldr	r2, [pc, #164]	@ (8002274 <ADC_Enable+0x128>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021e0:	e002      	b.n	80021e8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fb8b 	bl	8000908 <HAL_GetTick>
 80021f2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f4:	e028      	b.n	8002248 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fd82 	bl	8000d04 <LL_ADC_IsEnabled>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d104      	bne.n	8002210 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fd66 	bl	8000cdc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002210:	f7fe fb7a 	bl	8000908 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d914      	bls.n	8002248 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d00d      	beq.n	8002248 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	f043 0210 	orr.w	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e007      	b.n	8002258 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d1cf      	bne.n	80021f6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	8000003f 	.word	0x8000003f
 8002264:	50000100 	.word	0x50000100
 8002268:	50000300 	.word	0x50000300
 800226c:	50000700 	.word	0x50000700
 8002270:	20000000 	.word	0x20000000
 8002274:	053e2d63 	.word	0x053e2d63

08002278 <LL_ADC_IsEnabled>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <LL_ADC_IsEnabled+0x18>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <LL_ADC_IsEnabled+0x1a>
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_ADC_REG_IsConversionOngoing>:
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d101      	bne.n	80022b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b0a1      	sub	sp, #132	@ 0x84
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e0e7      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800234e:	2300      	movs	r3, #0
 8002350:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002352:	2300      	movs	r3, #0
 8002354:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235e:	d102      	bne.n	8002366 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002360:	4b6f      	ldr	r3, [pc, #444]	@ (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	e009      	b.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6e      	ldr	r2, [pc, #440]	@ (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d102      	bne.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002370:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	e001      	b.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0be      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff7f 	bl	800229e <LL_ADC_REG_IsConversionOngoing>
 80023a0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff79 	bl	800229e <LL_ADC_REG_IsConversionOngoing>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80a0 	bne.w	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80023b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 809c 	bne.w	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c4:	d004      	beq.n	80023d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a55      	ldr	r2, [pc, #340]	@ (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023d0:	4b56      	ldr	r3, [pc, #344]	@ (800252c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80023d2:	e000      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023d4:	4b56      	ldr	r3, [pc, #344]	@ (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80023d6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d04b      	beq.n	8002478 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023f2:	035b      	lsls	r3, r3, #13
 80023f4:	430b      	orrs	r3, r1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002404:	d004      	beq.n	8002410 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a45      	ldr	r2, [pc, #276]	@ (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10f      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002410:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002414:	f7ff ff30 	bl	8002278 <LL_ADC_IsEnabled>
 8002418:	4604      	mov	r4, r0
 800241a:	4841      	ldr	r0, [pc, #260]	@ (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800241c:	f7ff ff2c 	bl	8002278 <LL_ADC_IsEnabled>
 8002420:	4603      	mov	r3, r0
 8002422:	4323      	orrs	r3, r4
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e012      	b.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002430:	483c      	ldr	r0, [pc, #240]	@ (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002432:	f7ff ff21 	bl	8002278 <LL_ADC_IsEnabled>
 8002436:	4604      	mov	r4, r0
 8002438:	483b      	ldr	r0, [pc, #236]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800243a:	f7ff ff1d 	bl	8002278 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	431c      	orrs	r4, r3
 8002442:	483c      	ldr	r0, [pc, #240]	@ (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002444:	f7ff ff18 	bl	8002278 <LL_ADC_IsEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	4323      	orrs	r3, r4
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d056      	beq.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800245a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002462:	f023 030f 	bic.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	6811      	ldr	r1, [r2, #0]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	6892      	ldr	r2, [r2, #8]
 800246e:	430a      	orrs	r2, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002474:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002476:	e047      	b.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002482:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248c:	d004      	beq.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a23      	ldr	r2, [pc, #140]	@ (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d10f      	bne.n	80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002498:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800249c:	f7ff feec 	bl	8002278 <LL_ADC_IsEnabled>
 80024a0:	4604      	mov	r4, r0
 80024a2:	481f      	ldr	r0, [pc, #124]	@ (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024a4:	f7ff fee8 	bl	8002278 <LL_ADC_IsEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4323      	orrs	r3, r4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e012      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80024b8:	481a      	ldr	r0, [pc, #104]	@ (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024ba:	f7ff fedd 	bl	8002278 <LL_ADC_IsEnabled>
 80024be:	4604      	mov	r4, r0
 80024c0:	4819      	ldr	r0, [pc, #100]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024c2:	f7ff fed9 	bl	8002278 <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	431c      	orrs	r4, r3
 80024ca:	481a      	ldr	r0, [pc, #104]	@ (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024cc:	f7ff fed4 	bl	8002278 <LL_ADC_IsEnabled>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4323      	orrs	r3, r4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024ea:	f023 030f 	bic.w	r3, r3, #15
 80024ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024f2:	e009      	b.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002506:	e000      	b.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002508:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002512:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002516:	4618      	mov	r0, r3
 8002518:	3784      	adds	r7, #132	@ 0x84
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}
 800251e:	bf00      	nop
 8002520:	50000100 	.word	0x50000100
 8002524:	50000400 	.word	0x50000400
 8002528:	50000500 	.word	0x50000500
 800252c:	50000300 	.word	0x50000300
 8002530:	50000700 	.word	0x50000700
 8002534:	50000600 	.word	0x50000600

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	@ (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	@ (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	@ (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	@ (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	@ 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff29 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff40 	bl	8002580 <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff90 	bl	800262c <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5f 	bl	80025d8 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff33 	bl	800259c <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa4 	bl	8002694 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002766:	e15a      	b.n	8002a1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 814c 	beq.w	8002a18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d005      	beq.n	8002798 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002794:	2b02      	cmp	r3, #2
 8002796:	d130      	bne.n	80027fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ce:	2201      	movs	r2, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0201 	and.w	r2, r3, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d017      	beq.n	8002836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d123      	bne.n	800288a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	220f      	movs	r2, #15
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	6939      	ldr	r1, [r7, #16]
 8002886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80a6 	beq.w	8002a18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028cc:	4b5b      	ldr	r3, [pc, #364]	@ (8002a3c <HAL_GPIO_Init+0x2e4>)
 80028ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a3c <HAL_GPIO_Init+0x2e4>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80028d8:	4b58      	ldr	r3, [pc, #352]	@ (8002a3c <HAL_GPIO_Init+0x2e4>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e4:	4a56      	ldr	r2, [pc, #344]	@ (8002a40 <HAL_GPIO_Init+0x2e8>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800290e:	d01f      	beq.n	8002950 <HAL_GPIO_Init+0x1f8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a4c      	ldr	r2, [pc, #304]	@ (8002a44 <HAL_GPIO_Init+0x2ec>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d019      	beq.n	800294c <HAL_GPIO_Init+0x1f4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a4b      	ldr	r2, [pc, #300]	@ (8002a48 <HAL_GPIO_Init+0x2f0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_GPIO_Init+0x1f0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a4a      	ldr	r2, [pc, #296]	@ (8002a4c <HAL_GPIO_Init+0x2f4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00d      	beq.n	8002944 <HAL_GPIO_Init+0x1ec>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a49      	ldr	r2, [pc, #292]	@ (8002a50 <HAL_GPIO_Init+0x2f8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x1e8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a48      	ldr	r2, [pc, #288]	@ (8002a54 <HAL_GPIO_Init+0x2fc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_GPIO_Init+0x1e4>
 8002938:	2305      	movs	r3, #5
 800293a:	e00a      	b.n	8002952 <HAL_GPIO_Init+0x1fa>
 800293c:	2306      	movs	r3, #6
 800293e:	e008      	b.n	8002952 <HAL_GPIO_Init+0x1fa>
 8002940:	2304      	movs	r3, #4
 8002942:	e006      	b.n	8002952 <HAL_GPIO_Init+0x1fa>
 8002944:	2303      	movs	r3, #3
 8002946:	e004      	b.n	8002952 <HAL_GPIO_Init+0x1fa>
 8002948:	2302      	movs	r3, #2
 800294a:	e002      	b.n	8002952 <HAL_GPIO_Init+0x1fa>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_GPIO_Init+0x1fa>
 8002950:	2300      	movs	r3, #0
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	f002 0203 	and.w	r2, r2, #3
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	4093      	lsls	r3, r2
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002962:	4937      	ldr	r1, [pc, #220]	@ (8002a40 <HAL_GPIO_Init+0x2e8>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002970:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002994:	4a30      	ldr	r2, [pc, #192]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800299a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029be:	4a26      	ldr	r2, [pc, #152]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029c4:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a12:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f ae9d 	bne.w	8002768 <HAL_GPIO_Init+0x10>
  }
}
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010000 	.word	0x40010000
 8002a44:	48000400 	.word	0x48000400
 8002a48:	48000800 	.word	0x48000800
 8002a4c:	48000c00 	.word	0x48000c00
 8002a50:	48001000 	.word	0x48001000
 8002a54:	48001400 	.word	0x48001400
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa2:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fc1c 	bl	80002e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d141      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aca:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d131      	bne.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad8:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ade:	4a46      	ldr	r2, [pc, #280]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae8:	4b43      	ldr	r3, [pc, #268]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002af0:	4a41      	ldr	r2, [pc, #260]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002af6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af8:	4b40      	ldr	r3, [pc, #256]	@ (8002bfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2232      	movs	r2, #50	@ 0x32
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	4a3f      	ldr	r2, [pc, #252]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0c9b      	lsrs	r3, r3, #18
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0e:	e002      	b.n	8002b16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b16:	4b38      	ldr	r3, [pc, #224]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b22:	d102      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f2      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b2a:	4b33      	ldr	r3, [pc, #204]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b36:	d158      	bne.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e057      	b.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b42:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b4c:	e04d      	b.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b54:	d141      	bne.n	8002bda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b56:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d131      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b64:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b6a:	4a23      	ldr	r2, [pc, #140]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b74:	4b20      	ldr	r3, [pc, #128]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2232      	movs	r2, #50	@ 0x32
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	0c9b      	lsrs	r3, r3, #18
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9a:	e002      	b.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba2:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bae:	d102      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f2      	bne.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb6:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc2:	d112      	bne.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e011      	b.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bce:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bd8:	e007      	b.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bda:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002be2:	4a05      	ldr	r2, [pc, #20]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002be8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	431bde83 	.word	0x431bde83

08002c04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c08:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	@ (8002c20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c12:	6093      	str	r3, [r2, #8]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e2fe      	b.n	8003234 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d075      	beq.n	8002d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b97      	ldr	r3, [pc, #604]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4c:	4b94      	ldr	r3, [pc, #592]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3e>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_OscConfig+0x44>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05b      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d157      	bne.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e2d9      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x74>
 8002c8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a84      	ldr	r2, [pc, #528]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x98>
 8002ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	4b78      	ldr	r3, [pc, #480]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a77      	ldr	r2, [pc, #476]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b75      	ldr	r3, [pc, #468]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a74      	ldr	r2, [pc, #464]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fd fe14 	bl	8000908 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fd fe10 	bl	8000908 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e29e      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fd fe00 	bl	8000908 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fd fdfc 	bl	8000908 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e28a      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0xe8>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d075      	beq.n	8002e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3a:	4b59      	ldr	r3, [pc, #356]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d44:	4b56      	ldr	r3, [pc, #344]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d102      	bne.n	8002d5a <HAL_RCC_OscConfig+0x136>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_OscConfig+0x13c>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d11f      	bne.n	8002da0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d60:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_OscConfig+0x154>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e25d      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b49      	ldr	r3, [pc, #292]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	4946      	ldr	r1, [pc, #280]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d8c:	4b45      	ldr	r3, [pc, #276]	@ (8002ea4 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fd6d 	bl	8000870 <HAL_InitTick>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d043      	beq.n	8002e24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e249      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d023      	beq.n	8002df0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fd fda8 	bl	8000908 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7fd fda4 	bl	8000908 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e232      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dce:	4b34      	ldr	r3, [pc, #208]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	492d      	ldr	r1, [pc, #180]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
 8002dee:	e01a      	b.n	8002e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fd fd84 	bl	8000908 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fd fd80 	bl	8000908 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e20e      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1e0>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d041      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01c      	beq.n	8002e74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e40:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fd fd5d 	bl	8000908 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fd fd59 	bl	8000908 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1e7      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0ef      	beq.n	8002e52 <HAL_RCC_OscConfig+0x22e>
 8002e72:	e020      	b.n	8002eb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd fd40 	bl	8000908 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e8a:	e00d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fd fd3c 	bl	8000908 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d906      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1ca      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ea      	bne.n	8002e8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a6 	beq.w	8003010 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ec8:	4b84      	ldr	r3, [pc, #528]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2b4>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x2b6>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	4b7f      	ldr	r3, [pc, #508]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eea:	4b7c      	ldr	r3, [pc, #496]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efa:	4b79      	ldr	r3, [pc, #484]	@ (80030e0 <HAL_RCC_OscConfig+0x4bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d118      	bne.n	8002f38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f06:	4b76      	ldr	r3, [pc, #472]	@ (80030e0 <HAL_RCC_OscConfig+0x4bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a75      	ldr	r2, [pc, #468]	@ (80030e0 <HAL_RCC_OscConfig+0x4bc>)
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f12:	f7fd fcf9 	bl	8000908 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1a:	f7fd fcf5 	bl	8000908 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e183      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80030e0 <HAL_RCC_OscConfig+0x4bc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <HAL_RCC_OscConfig+0x32e>
 8002f40:	4b66      	ldr	r3, [pc, #408]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f46:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f50:	e024      	b.n	8002f9c <HAL_RCC_OscConfig+0x378>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d110      	bne.n	8002f7c <HAL_RCC_OscConfig+0x358>
 8002f5a:	4b60      	ldr	r3, [pc, #384]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f60:	4a5e      	ldr	r2, [pc, #376]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f70:	4a5a      	ldr	r2, [pc, #360]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f7a:	e00f      	b.n	8002f9c <HAL_RCC_OscConfig+0x378>
 8002f7c:	4b57      	ldr	r3, [pc, #348]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a56      	ldr	r2, [pc, #344]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f8c:	4b53      	ldr	r3, [pc, #332]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a52      	ldr	r2, [pc, #328]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d016      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fd fcb0 	bl	8000908 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fd fcac 	bl	8000908 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e138      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc2:	4b46      	ldr	r3, [pc, #280]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ed      	beq.n	8002fac <HAL_RCC_OscConfig+0x388>
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7fd fc99 	bl	8000908 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7fd fc95 	bl	8000908 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e121      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ed      	bne.n	8002fda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003004:	4b35      	ldr	r3, [pc, #212]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	4a34      	ldr	r2, [pc, #208]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 800300a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800300e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d03c      	beq.n	8003096 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01c      	beq.n	800305e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003024:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800302a:	4a2c      	ldr	r2, [pc, #176]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fd fc68 	bl	8000908 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303c:	f7fd fc64 	bl	8000908 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0f2      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800304e:	4b23      	ldr	r3, [pc, #140]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8003050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <HAL_RCC_OscConfig+0x418>
 800305c:	e01b      	b.n	8003096 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800305e:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003064:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fd fc4b 	bl	8000908 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003076:	f7fd fc47 	bl	8000908 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0d5      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003088:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ef      	bne.n	8003076 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80c9 	beq.w	8003232 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a0:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	f000 8083 	beq.w	80031b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d15e      	bne.n	8003174 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a08      	ldr	r2, [pc, #32]	@ (80030dc <HAL_RCC_OscConfig+0x4b8>)
 80030bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fd fc21 	bl	8000908 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c8:	e00c      	b.n	80030e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fd fc1d 	bl	8000908 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d905      	bls.n	80030e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0ab      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e4:	4b55      	ldr	r3, [pc, #340]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ec      	bne.n	80030ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f0:	4b52      	ldr	r3, [pc, #328]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	4b52      	ldr	r3, [pc, #328]	@ (8003240 <HAL_RCC_OscConfig+0x61c>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6a11      	ldr	r1, [r2, #32]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003100:	3a01      	subs	r2, #1
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800310a:	0212      	lsls	r2, r2, #8
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003112:	0852      	lsrs	r2, r2, #1
 8003114:	3a01      	subs	r2, #1
 8003116:	0552      	lsls	r2, r2, #21
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800311e:	0852      	lsrs	r2, r2, #1
 8003120:	3a01      	subs	r2, #1
 8003122:	0652      	lsls	r2, r2, #25
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800312a:	06d2      	lsls	r2, r2, #27
 800312c:	430a      	orrs	r2, r1
 800312e:	4943      	ldr	r1, [pc, #268]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 8003130:	4313      	orrs	r3, r2
 8003132:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b41      	ldr	r3, [pc, #260]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a40      	ldr	r2, [pc, #256]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800313e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003140:	4b3e      	ldr	r3, [pc, #248]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a3d      	ldr	r2, [pc, #244]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800314a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fd fbdc 	bl	8000908 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fd fbd8 	bl	8000908 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e066      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	4b35      	ldr	r3, [pc, #212]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x530>
 8003172:	e05e      	b.n	8003232 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003174:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a30      	ldr	r2, [pc, #192]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 800317a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fbc2 	bl	8000908 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003188:	f7fd fbbe 	bl	8000908 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04c      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319a:	4b28      	ldr	r3, [pc, #160]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031a6:	4b25      	ldr	r3, [pc, #148]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	4924      	ldr	r1, [pc, #144]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 80031ac:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <HAL_RCC_OscConfig+0x620>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
 80031b2:	e03e      	b.n	8003232 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e039      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <HAL_RCC_OscConfig+0x618>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d12c      	bne.n	800322e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	3b01      	subs	r3, #1
 80031e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d123      	bne.n	800322e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d11b      	bne.n	800322e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d113      	bne.n	800322e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d109      	bne.n	800322e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	019f800c 	.word	0x019f800c
 8003244:	feeefffc 	.word	0xfeeefffc

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e11e      	b.n	800349e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b91      	ldr	r3, [pc, #580]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b8e      	ldr	r3, [pc, #568]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 020f 	bic.w	r2, r3, #15
 8003276:	498c      	ldr	r1, [pc, #560]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b8a      	ldr	r3, [pc, #552]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e106      	b.n	800349e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d073      	beq.n	8003384 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d129      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a4:	4b81      	ldr	r3, [pc, #516]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0f4      	b.n	800349e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032b4:	f000 f966 	bl	8003584 <RCC_GetSysClockFreqFromPLLSource>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4a7c      	ldr	r2, [pc, #496]	@ (80034b0 <HAL_RCC_ClockConfig+0x268>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d93f      	bls.n	8003342 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032c2:	4b7a      	ldr	r3, [pc, #488]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d033      	beq.n	8003342 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d12f      	bne.n	8003342 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032e2:	4b72      	ldr	r3, [pc, #456]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ea:	4a70      	ldr	r2, [pc, #448]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80032ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e024      	b.n	8003342 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003300:	4b6a      	ldr	r3, [pc, #424]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0c6      	b.n	800349e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003310:	4b66      	ldr	r3, [pc, #408]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0be      	b.n	800349e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003320:	f000 f8ce 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8003324:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4a61      	ldr	r2, [pc, #388]	@ (80034b0 <HAL_RCC_ClockConfig+0x268>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d909      	bls.n	8003342 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800332e:	4b5f      	ldr	r3, [pc, #380]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003336:	4a5d      	ldr	r2, [pc, #372]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800333c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003342:	4b5a      	ldr	r3, [pc, #360]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4957      	ldr	r1, [pc, #348]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003354:	f7fd fad8 	bl	8000908 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7fd fad4 	bl	8000908 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e095      	b.n	800349e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b4e      	ldr	r3, [pc, #312]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 020c 	and.w	r2, r3, #12
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1eb      	bne.n	800335c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d023      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800339c:	4b43      	ldr	r3, [pc, #268]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a42      	ldr	r2, [pc, #264]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80033a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033b4:	4b3d      	ldr	r3, [pc, #244]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033bc:	4a3b      	ldr	r2, [pc, #236]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80033be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b39      	ldr	r3, [pc, #228]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4936      	ldr	r1, [pc, #216]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
 80033d6:	e008      	b.n	80033ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b80      	cmp	r3, #128	@ 0x80
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033de:	4b33      	ldr	r3, [pc, #204]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4a32      	ldr	r2, [pc, #200]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 80033e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ea:	4b2f      	ldr	r3, [pc, #188]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d21d      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f8:	4b2b      	ldr	r3, [pc, #172]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 020f 	bic.w	r2, r3, #15
 8003400:	4929      	ldr	r1, [pc, #164]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003408:	f7fd fa7e 	bl	8000908 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fd fa7a 	bl	8000908 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e03b      	b.n	800349e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d1ed      	bne.n	8003410 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003440:	4b1a      	ldr	r3, [pc, #104]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4917      	ldr	r1, [pc, #92]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345e:	4b13      	ldr	r3, [pc, #76]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	490f      	ldr	r1, [pc, #60]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003472:	f000 f825 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8003476:	4602      	mov	r2, r0
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <HAL_RCC_ClockConfig+0x264>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	490c      	ldr	r1, [pc, #48]	@ (80034b4 <HAL_RCC_ClockConfig+0x26c>)
 8003484:	5ccb      	ldrb	r3, [r1, r3]
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <HAL_RCC_ClockConfig+0x270>)
 8003490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003492:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <HAL_RCC_ClockConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f9ea 	bl	8000870 <HAL_InitTick>
 800349c:	4603      	mov	r3, r0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40022000 	.word	0x40022000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	04c4b400 	.word	0x04c4b400
 80034b4:	08003b1c 	.word	0x08003b1c
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d2:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e047      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034d8:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d102      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e4:	4b26      	ldr	r3, [pc, #152]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e03e      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034ea:	4b23      	ldr	r3, [pc, #140]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d136      	bne.n	8003564 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f6:	4b20      	ldr	r3, [pc, #128]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3301      	adds	r3, #1
 800350c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d10c      	bne.n	800352e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003514:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	4a16      	ldr	r2, [pc, #88]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800351e:	68d2      	ldr	r2, [r2, #12]
 8003520:	0a12      	lsrs	r2, r2, #8
 8003522:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	617b      	str	r3, [r7, #20]
      break;
 800352c:	e00c      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800352e:	4a13      	ldr	r2, [pc, #76]	@ (800357c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003538:	68d2      	ldr	r2, [r2, #12]
 800353a:	0a12      	lsrs	r2, r2, #8
 800353c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
      break;
 8003546:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0e5b      	lsrs	r3, r3, #25
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e001      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003568:	693b      	ldr	r3, [r7, #16]
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	00f42400 	.word	0x00f42400
 8003580:	007a1200 	.word	0x007a1200

08003584 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800358a:	4b1e      	ldr	r3, [pc, #120]	@ (8003604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003594:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d10c      	bne.n	80035c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035a8:	4a17      	ldr	r2, [pc, #92]	@ (8003608 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	4a14      	ldr	r2, [pc, #80]	@ (8003604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b2:	68d2      	ldr	r2, [r2, #12]
 80035b4:	0a12      	lsrs	r2, r2, #8
 80035b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	617b      	str	r3, [r7, #20]
    break;
 80035c0:	e00c      	b.n	80035dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c2:	4a12      	ldr	r2, [pc, #72]	@ (800360c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	0a12      	lsrs	r2, r2, #8
 80035d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
    break;
 80035da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035dc:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0e5b      	lsrs	r3, r3, #25
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035f6:	687b      	ldr	r3, [r7, #4]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40021000 	.word	0x40021000
 8003608:	007a1200 	.word	0x007a1200
 800360c:	00f42400 	.word	0x00f42400

08003610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003618:	2300      	movs	r3, #0
 800361a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800361c:	2300      	movs	r3, #0
 800361e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8098 	beq.w	800375e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362e:	2300      	movs	r3, #0
 8003630:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003632:	4b43      	ldr	r3, [pc, #268]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4b40      	ldr	r3, [pc, #256]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	4a3f      	ldr	r2, [pc, #252]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003648:	6593      	str	r3, [r2, #88]	@ 0x58
 800364a:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365a:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a39      	ldr	r2, [pc, #228]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003666:	f7fd f94f 	bl	8000908 <HAL_GetTick>
 800366a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366c:	e009      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fd f94b 	bl	8000908 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d902      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	74fb      	strb	r3, [r7, #19]
        break;
 8003680:	e005      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003682:	4b30      	ldr	r3, [pc, #192]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ef      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d159      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003694:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800369e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d019      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036b0:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036bc:	4b20      	ldr	r3, [pc, #128]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036dc:	4a18      	ldr	r2, [pc, #96]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fd f90b 	bl	8000908 <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f4:	e00b      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd f907 	bl	8000908 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d902      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	74fb      	strb	r3, [r7, #19]
            break;
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370e:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ec      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003722:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003730:	4903      	ldr	r1, [pc, #12]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003738:	e008      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800373a:	7cfb      	ldrb	r3, [r7, #19]
 800373c:	74bb      	strb	r3, [r7, #18]
 800373e:	e005      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374c:	7c7b      	ldrb	r3, [r7, #17]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d105      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003752:	4ba7      	ldr	r3, [pc, #668]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	4aa6      	ldr	r2, [pc, #664]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800376a:	4ba1      	ldr	r3, [pc, #644]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003770:	f023 0203 	bic.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	499d      	ldr	r1, [pc, #628]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800378c:	4b98      	ldr	r3, [pc, #608]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 020c 	bic.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4995      	ldr	r1, [pc, #596]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ae:	4b90      	ldr	r3, [pc, #576]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	498c      	ldr	r1, [pc, #560]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d0:	4b87      	ldr	r3, [pc, #540]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	4984      	ldr	r1, [pc, #528]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037f2:	4b7f      	ldr	r3, [pc, #508]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	497b      	ldr	r1, [pc, #492]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003814:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	4973      	ldr	r1, [pc, #460]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003836:	4b6e      	ldr	r3, [pc, #440]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	496a      	ldr	r1, [pc, #424]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003858:	4b65      	ldr	r3, [pc, #404]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4962      	ldr	r1, [pc, #392]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800387a:	4b5d      	ldr	r3, [pc, #372]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003880:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	4959      	ldr	r1, [pc, #356]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800389c:	4b54      	ldr	r3, [pc, #336]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	4951      	ldr	r1, [pc, #324]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038be:	4b4c      	ldr	r3, [pc, #304]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	4948      	ldr	r1, [pc, #288]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d015      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e0:	4b43      	ldr	r3, [pc, #268]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	4940      	ldr	r1, [pc, #256]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038fe:	d105      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003900:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a3a      	ldr	r2, [pc, #232]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800390a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003918:	4b35      	ldr	r3, [pc, #212]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003926:	4932      	ldr	r1, [pc, #200]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003936:	d105      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003938:	4b2d      	ldr	r3, [pc, #180]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4a2c      	ldr	r2, [pc, #176]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003942:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	4924      	ldr	r1, [pc, #144]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800396e:	d105      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003970:	4b1f      	ldr	r3, [pc, #124]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a1e      	ldr	r2, [pc, #120]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003988:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003996:	4916      	ldr	r1, [pc, #88]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039a6:	d105      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a8:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a10      	ldr	r2, [pc, #64]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d019      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	4908      	ldr	r1, [pc, #32]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039de:	d109      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e0:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a02      	ldr	r2, [pc, #8]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ea:	60d3      	str	r3, [r2, #12]
 80039ec:	e002      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a00:	4b29      	ldr	r3, [pc, #164]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	4926      	ldr	r1, [pc, #152]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a20:	4b21      	ldr	r3, [pc, #132]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a20      	ldr	r2, [pc, #128]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a38:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a46:	4918      	ldr	r1, [pc, #96]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a56:	d105      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a12      	ldr	r2, [pc, #72]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a70:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7e:	490a      	ldr	r1, [pc, #40]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a90:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a04      	ldr	r2, [pc, #16]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000

08003aac <memset>:
 8003aac:	4402      	add	r2, r0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <__libc_init_array>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4d0d      	ldr	r5, [pc, #52]	@ (8003af4 <__libc_init_array+0x38>)
 8003ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8003af8 <__libc_init_array+0x3c>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	42a6      	cmp	r6, r4
 8003aca:	d109      	bne.n	8003ae0 <__libc_init_array+0x24>
 8003acc:	4d0b      	ldr	r5, [pc, #44]	@ (8003afc <__libc_init_array+0x40>)
 8003ace:	4c0c      	ldr	r4, [pc, #48]	@ (8003b00 <__libc_init_array+0x44>)
 8003ad0:	f000 f818 	bl	8003b04 <_init>
 8003ad4:	1b64      	subs	r4, r4, r5
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	2600      	movs	r6, #0
 8003ada:	42a6      	cmp	r6, r4
 8003adc:	d105      	bne.n	8003aea <__libc_init_array+0x2e>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae4:	4798      	blx	r3
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7ee      	b.n	8003ac8 <__libc_init_array+0xc>
 8003aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aee:	4798      	blx	r3
 8003af0:	3601      	adds	r6, #1
 8003af2:	e7f2      	b.n	8003ada <__libc_init_array+0x1e>
 8003af4:	08003b2c 	.word	0x08003b2c
 8003af8:	08003b2c 	.word	0x08003b2c
 8003afc:	08003b2c 	.word	0x08003b2c
 8003b00:	08003b30 	.word	0x08003b30

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
