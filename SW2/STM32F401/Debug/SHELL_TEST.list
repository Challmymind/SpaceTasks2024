
SHELL_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800249c  0800249c  0000349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800255c  0800255c  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  0800255c  0800255c  0000355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002564  08002564  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002564  08002564  00003564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002568  08002568  00003568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800256c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  0800257c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800257c  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dae  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001745  00000000  00000000  0000bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000d538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000525  00000000  00000000  0000dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175a5  00000000  00000000  0000e105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008631  00000000  00000000  000256aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866e7  00000000  00000000  0002dcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b43c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a00  00000000  00000000  000b4408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000b5e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002484 	.word	0x08002484

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002484 	.word	0x08002484

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b96a 	b.w	80004e4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	460c      	mov	r4, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14e      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000234:	4694      	mov	ip, r2
 8000236:	458c      	cmp	ip, r1
 8000238:	4686      	mov	lr, r0
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	d962      	bls.n	8000306 <__udivmoddi4+0xde>
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0320 	rsb	r3, r2, #32
 8000246:	4091      	lsls	r1, r2
 8000248:	fa20 f303 	lsr.w	r3, r0, r3
 800024c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000250:	4319      	orrs	r1, r3
 8000252:	fa00 fe02 	lsl.w	lr, r0, r2
 8000256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025a:	fa1f f68c 	uxth.w	r6, ip
 800025e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000262:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000266:	fb07 1114 	mls	r1, r7, r4, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb04 f106 	mul.w	r1, r4, r6
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f104 30ff 	add.w	r0, r4, #4294967295
 800027e:	f080 8112 	bcs.w	80004a6 <__udivmoddi4+0x27e>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 810f 	bls.w	80004a6 <__udivmoddi4+0x27e>
 8000288:	3c02      	subs	r4, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a59      	subs	r1, r3, r1
 800028e:	fa1f f38e 	uxth.w	r3, lr
 8000292:	fbb1 f0f7 	udiv	r0, r1, r7
 8000296:	fb07 1110 	mls	r1, r7, r0, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb00 f606 	mul.w	r6, r0, r6
 80002a2:	429e      	cmp	r6, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x94>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ae:	f080 80fc 	bcs.w	80004aa <__udivmoddi4+0x282>
 80002b2:	429e      	cmp	r6, r3
 80002b4:	f240 80f9 	bls.w	80004aa <__udivmoddi4+0x282>
 80002b8:	4463      	add	r3, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	1b9b      	subs	r3, r3, r6
 80002be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa6>
 80002c6:	40d3      	lsrs	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xba>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb4>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa6>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x150>
 80002ea:	42a3      	cmp	r3, r4
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xcc>
 80002ee:	4290      	cmp	r0, r2
 80002f0:	f0c0 80f0 	bcc.w	80004d4 <__udivmoddi4+0x2ac>
 80002f4:	1a86      	subs	r6, r0, r2
 80002f6:	eb64 0303 	sbc.w	r3, r4, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	d0e6      	beq.n	80002ce <__udivmoddi4+0xa6>
 8000300:	e9c5 6300 	strd	r6, r3, [r5]
 8000304:	e7e3      	b.n	80002ce <__udivmoddi4+0xa6>
 8000306:	2a00      	cmp	r2, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x204>
 800030c:	eba1 040c 	sub.w	r4, r1, ip
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	fa1f f78c 	uxth.w	r7, ip
 8000318:	2101      	movs	r1, #1
 800031a:	fbb4 f6f8 	udiv	r6, r4, r8
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb08 4416 	mls	r4, r8, r6, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb07 f006 	mul.w	r0, r7, r6
 800032e:	4298      	cmp	r0, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x11c>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 34ff 	add.w	r4, r6, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x11a>
 800033c:	4298      	cmp	r0, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2b4>
 8000342:	4626      	mov	r6, r4
 8000344:	1a1c      	subs	r4, r3, r0
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb4 f0f8 	udiv	r0, r4, r8
 800034e:	fb08 4410 	mls	r4, r8, r0, r4
 8000352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000356:	fb00 f707 	mul.w	r7, r0, r7
 800035a:	429f      	cmp	r7, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x148>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 34ff 	add.w	r4, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x146>
 8000368:	429f      	cmp	r7, r3
 800036a:	f200 80b0 	bhi.w	80004ce <__udivmoddi4+0x2a6>
 800036e:	4620      	mov	r0, r4
 8000370:	1bdb      	subs	r3, r3, r7
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x9c>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa20 fc06 	lsr.w	ip, r0, r6
 8000388:	fa04 f301 	lsl.w	r3, r4, r1
 800038c:	ea43 030c 	orr.w	r3, r3, ip
 8000390:	40f4      	lsrs	r4, r6
 8000392:	fa00 f801 	lsl.w	r8, r0, r1
 8000396:	0c38      	lsrs	r0, r7, #16
 8000398:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800039c:	fbb4 fef0 	udiv	lr, r4, r0
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	fb00 441e 	mls	r4, r0, lr, r4
 80003a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ac:	fb0e f90c 	mul.w	r9, lr, ip
 80003b0:	45a1      	cmp	r9, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x1a6>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003be:	f080 8084 	bcs.w	80004ca <__udivmoddi4+0x2a2>
 80003c2:	45a1      	cmp	r9, r4
 80003c4:	f240 8081 	bls.w	80004ca <__udivmoddi4+0x2a2>
 80003c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	eba4 0409 	sub.w	r4, r4, r9
 80003d2:	fa1f f983 	uxth.w	r9, r3
 80003d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003da:	fb00 4413 	mls	r4, r0, r3, r4
 80003de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1d2>
 80003ea:	193c      	adds	r4, r7, r4
 80003ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f0:	d267      	bcs.n	80004c2 <__udivmoddi4+0x29a>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0x29a>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	429c      	cmp	r4, r3
 8000408:	46ce      	mov	lr, r9
 800040a:	469c      	mov	ip, r3
 800040c:	d351      	bcc.n	80004b2 <__udivmoddi4+0x28a>
 800040e:	d04e      	beq.n	80004ae <__udivmoddi4+0x286>
 8000410:	b155      	cbz	r5, 8000428 <__udivmoddi4+0x200>
 8000412:	ebb8 030e 	subs.w	r3, r8, lr
 8000416:	eb64 040c 	sbc.w	r4, r4, ip
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	40cb      	lsrs	r3, r1
 8000420:	431e      	orrs	r6, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c5 6400 	strd	r6, r4, [r5]
 8000428:	2100      	movs	r1, #0
 800042a:	e750      	b.n	80002ce <__udivmoddi4+0xa6>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f103 	lsr.w	r1, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa24 f303 	lsr.w	r3, r4, r3
 800043c:	4094      	lsls	r4, r2
 800043e:	430c      	orrs	r4, r1
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa00 fe02 	lsl.w	lr, r0, r2
 8000448:	fa1f f78c 	uxth.w	r7, ip
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3110 	mls	r1, r8, r0, r3
 8000454:	0c23      	lsrs	r3, r4, #16
 8000456:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045a:	fb00 f107 	mul.w	r1, r0, r7
 800045e:	4299      	cmp	r1, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x24c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 36ff 	add.w	r6, r0, #4294967295
 800046a:	d22c      	bcs.n	80004c6 <__udivmoddi4+0x29e>
 800046c:	4299      	cmp	r1, r3
 800046e:	d92a      	bls.n	80004c6 <__udivmoddi4+0x29e>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f1f8 	udiv	r1, r3, r8
 800047c:	fb08 3311 	mls	r3, r8, r1, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb01 f307 	mul.w	r3, r1, r7
 8000488:	42a3      	cmp	r3, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x276>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f101 36ff 	add.w	r6, r1, #4294967295
 8000494:	d213      	bcs.n	80004be <__udivmoddi4+0x296>
 8000496:	42a3      	cmp	r3, r4
 8000498:	d911      	bls.n	80004be <__udivmoddi4+0x296>
 800049a:	3902      	subs	r1, #2
 800049c:	4464      	add	r4, ip
 800049e:	1ae4      	subs	r4, r4, r3
 80004a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a4:	e739      	b.n	800031a <__udivmoddi4+0xf2>
 80004a6:	4604      	mov	r4, r0
 80004a8:	e6f0      	b.n	800028c <__udivmoddi4+0x64>
 80004aa:	4608      	mov	r0, r1
 80004ac:	e706      	b.n	80002bc <__udivmoddi4+0x94>
 80004ae:	45c8      	cmp	r8, r9
 80004b0:	d2ae      	bcs.n	8000410 <__udivmoddi4+0x1e8>
 80004b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a8      	b.n	8000410 <__udivmoddi4+0x1e8>
 80004be:	4631      	mov	r1, r6
 80004c0:	e7ed      	b.n	800049e <__udivmoddi4+0x276>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e799      	b.n	80003fa <__udivmoddi4+0x1d2>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e7d4      	b.n	8000474 <__udivmoddi4+0x24c>
 80004ca:	46d6      	mov	lr, sl
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1a6>
 80004ce:	4463      	add	r3, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e74d      	b.n	8000370 <__udivmoddi4+0x148>
 80004d4:	4606      	mov	r6, r0
 80004d6:	4623      	mov	r3, r4
 80004d8:	4608      	mov	r0, r1
 80004da:	e70f      	b.n	80002fc <__udivmoddi4+0xd4>
 80004dc:	3e02      	subs	r6, #2
 80004de:	4463      	add	r3, ip
 80004e0:	e730      	b.n	8000344 <__udivmoddi4+0x11c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_Z5printPKc>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callbacks for use with functions defined within config.
// To add a new command to the shell, add it to the config file and re-generate shell library using script.
void print(const char* string){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 2000);
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f7ff fe79 	bl	80001e8 <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	4803      	ldr	r0, [pc, #12]	@ (8000510 <_Z5printPKc+0x28>)
 8000502:	f001 fb41 	bl	8001b88 <HAL_UART_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000002c 	.word	0x2000002c

08000514 <_Z4helpv>:
void help(){
 8000514:	b598      	push	{r3, r4, r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)HELP_OUTPUT, strlen(HELP_OUTPUT), 2000);
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <_Z4helpv+0x28>)
 800051a:	681c      	ldr	r4, [r3, #0]
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <_Z4helpv+0x28>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff fe61 	bl	80001e8 <strlen>
 8000526:	4603      	mov	r3, r0
 8000528:	b29a      	uxth	r2, r3
 800052a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800052e:	4621      	mov	r1, r4
 8000530:	4803      	ldr	r0, [pc, #12]	@ (8000540 <_Z4helpv+0x2c>)
 8000532:	f001 fb29 	bl	8001b88 <HAL_UART_Transmit>
}
 8000536:	bf00      	nop
 8000538:	bd98      	pop	{r3, r4, r7, pc}
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	2000002c 	.word	0x2000002c

08000544 <_Z8showtimePKcS0_>:
void showtime(const char*, const char*){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	const char* x = "crazy show";
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <_Z8showtimePKcS0_+0x2c>)
 8000550:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)x, strlen(x), 2000);
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	f7ff fe48 	bl	80001e8 <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000560:	68f9      	ldr	r1, [r7, #12]
 8000562:	4804      	ldr	r0, [pc, #16]	@ (8000574 <_Z8showtimePKcS0_+0x30>)
 8000564:	f001 fb10 	bl	8001b88 <HAL_UART_Transmit>
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	0800249c 	.word	0x0800249c
 8000574:	2000002c 	.word	0x2000002c

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	f6ad 0de8 	subw	sp, sp, #2280	@ 0x8e8
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fb7e 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f838 	bl	80005f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8ce 	bl	8000728 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800058c:	f000 f89e 	bl	80006cc <_ZL19MX_USART1_UART_Initv>
  // Message buffer
  uint8_t rx_buff[255];
  // Create shell class
  Shell shell;
  // Shell objects need to be provided with a compare function for string.  This should make porting easier.
  shell.setStringCompare(strcmp);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4914      	ldr	r1, [pc, #80]	@ (80005e4 <main+0x6c>)
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f993 	bl	80008c0 <_ZN5Shell16setStringCompareEPFiPKcS1_E>
  // Set all callbacks
  shell.setCommand_print_Callback(print);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4912      	ldr	r1, [pc, #72]	@ (80005e8 <main+0x70>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fa14 	bl	80009cc <_ZN5Shell25setCommand_print_CallbackEPFvPKcE>
  shell.setCommand_help_Callback(help);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4911      	ldr	r1, [pc, #68]	@ (80005ec <main+0x74>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fa2d 	bl	8000a08 <_ZN5Shell24setCommand_help_CallbackEPFvvE>
  shell.setCommand_showtime_Callback(showtime);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	490f      	ldr	r1, [pc, #60]	@ (80005f0 <main+0x78>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fa19 	bl	80009ea <_ZN5Shell28setCommand_showtime_CallbackEPFvPKcS1_E>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Read message from the UART
	int bytes = UART_UNIVERSAL_READ(&huart1, (char*)rx_buff, 255);
 80005b8:	f207 73e4 	addw	r3, r7, #2020	@ 0x7e4
 80005bc:	22ff      	movs	r2, #255	@ 0xff
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <main+0x7c>)
 80005c2:	f000 fae3 	bl	8000b8c <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci>
 80005c6:	f8c7 08e4 	str.w	r0, [r7, #2276]	@ 0x8e4
	// Perform main shell function
	if(bytes > 0) shell.execute((char*)rx_buff, bytes);
 80005ca:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	@ 0x8e4
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	ddf2      	ble.n	80005b8 <main+0x40>
 80005d2:	f207 71e4 	addw	r1, r7, #2020	@ 0x7e4
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	@ 0x8e4
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f97d 	bl	80008dc <_ZN5Shell7executeEPKci>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80005e2:	e7e9      	b.n	80005b8 <main+0x40>
 80005e4:	080001d5 	.word	0x080001d5
 80005e8:	080004e9 	.word	0x080004e9
 80005ec:	08000515 	.word	0x08000515
 80005f0:	08000545 	.word	0x08000545
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ff10 	bl	800242c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <_Z18SystemClock_Configv+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	@ (80006c4 <_Z18SystemClock_Configv+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <_Z18SystemClock_Configv+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <_Z18SystemClock_Configv+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a20      	ldr	r2, [pc, #128]	@ (80006c8 <_Z18SystemClock_Configv+0xd0>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <_Z18SystemClock_Configv+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fde3 	bl	8001238 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000682:	f000 f86b 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f841 	bl	8001728 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	bf14      	ite	ne
 80006ac:	2301      	movne	r3, #1
 80006ae:	2300      	moveq	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80006b6:	f000 f851 	bl	800075c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	@ 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <_ZL19MX_USART1_UART_Initv+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4807      	ldr	r0, [pc, #28]	@ (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000704:	f001 f9f0 	bl	8001ae8 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000718:	f000 f820 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000002c 	.word	0x2000002c
 8000724:	40011000 	.word	0x40011000

08000728 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <_ZL12MX_GPIO_Initv+0x30>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <_ZL12MX_GPIO_Initv+0x30>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <_ZL12MX_GPIO_Initv+0x30>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <_ZN5Shell8tokenizeEPKci>:
*
* @param ptr Pointer to string to tokenise, can be any input e.g. string from UART buffer.
* @param size Size of the ptr, prevents out of bounds errors.
* @return The number of tokens that were read.
*/
int Shell::tokenize(const char* ptr, int size){
 8000768:	b480      	push	{r7}
 800076a:	b08b      	sub	sp, #44	@ 0x2c
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
    if(size == 0) return -1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <_ZN5Shell8tokenizeEPKci+0x18>
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e099      	b.n	80008b4 <_ZN5Shell8tokenizeEPKci+0x14c>
    // Last access track index
    int current = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
    // Search for command name
    int x = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
    // Must subtract 1 from length to ensure string can be terminated
    while(true){
        // Abort if no correct syntax was found in the string
        if(current >= size) return -1;
 8000788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	db02      	blt.n	8000796 <_ZN5Shell8tokenizeEPKci+0x2e>
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	e08e      	b.n	80008b4 <_ZN5Shell8tokenizeEPKci+0x14c>
        if(x >= SHELL_MAX_TOKEN_LEN-1) return -1;
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	2b62      	cmp	r3, #98	@ 0x62
 800079a:	dd02      	ble.n	80007a2 <_ZN5Shell8tokenizeEPKci+0x3a>
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e088      	b.n	80008b4 <_ZN5Shell8tokenizeEPKci+0x14c>
        char c = ptr[current];
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	75fb      	strb	r3, [r7, #23]
        // Attempt to remove artefacts from the input if any have been added. 
        // Assuming clean input might be better, forcing the end user to think about what they are doing.
        if((c >= 127) || (c<=31)) {current++;continue;}
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80007b0:	d802      	bhi.n	80007b8 <_ZN5Shell8tokenizeEPKci+0x50>
 80007b2:	7dfb      	ldrb	r3, [r7, #23]
 80007b4:	2b1f      	cmp	r3, #31
 80007b6:	d803      	bhi.n	80007c0 <_ZN5Shell8tokenizeEPKci+0x58>
 80007b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ba:	3301      	adds	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007be:	e01b      	b.n	80007f8 <_ZN5Shell8tokenizeEPKci+0x90>
        // Command name ends with "[=" characters, so we jump 2 index to the beginning of the arguments.
        // Can lead to undefined behaviour if the syntax is incorrect, critical part, must be fixed.
        #warning unfixed possible source of error.
        if(c == '[') {
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	2b5b      	cmp	r3, #91	@ 0x5b
 80007c4:	d10c      	bne.n	80007e0 <_ZN5Shell8tokenizeEPKci+0x78>
            current += 2;
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	3302      	adds	r3, #2
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
            _tokens[0][x] = '\0'; // Terminate string
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	4413      	add	r3, r2
 80007d2:	3304      	adds	r3, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
            break;
 80007d8:	bf00      	nop
            x++;
        }
    }
    
    // Tokenising arguments
    for(int i = 1; i<SHELL_MAX_ARGS; i++){
 80007da:	2301      	movs	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	e065      	b.n	80008ac <_ZN5Shell8tokenizeEPKci+0x144>
            _tokens[0][x] = c;
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	4413      	add	r3, r2
 80007e6:	3304      	adds	r3, #4
 80007e8:	7dfa      	ldrb	r2, [r7, #23]
 80007ea:	701a      	strb	r2, [r3, #0]
            current++;
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	3301      	adds	r3, #1
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
            x++;
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	3301      	adds	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
    }
 80007f8:	e7c6      	b.n	8000788 <_ZN5Shell8tokenizeEPKci+0x20>
        // Overshadowing last x variable
        int x = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
        while(true){
            // Abort if no correct syntax was found in the string
            if(current >= size) return -1;
 80007fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	429a      	cmp	r2, r3
 8000804:	db02      	blt.n	800080c <_ZN5Shell8tokenizeEPKci+0xa4>
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	e053      	b.n	80008b4 <_ZN5Shell8tokenizeEPKci+0x14c>
            if(x >= SHELL_MAX_TOKEN_LEN-1) return -1;
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	2b62      	cmp	r3, #98	@ 0x62
 8000810:	dd02      	ble.n	8000818 <_ZN5Shell8tokenizeEPKci+0xb0>
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e04d      	b.n	80008b4 <_ZN5Shell8tokenizeEPKci+0x14c>

            char c = ptr[current];
 8000818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	75bb      	strb	r3, [r7, #22]
            // Special case
            if(c == ']'){
 8000822:	7dbb      	ldrb	r3, [r7, #22]
 8000824:	2b5d      	cmp	r3, #93	@ 0x5d
 8000826:	d110      	bne.n	800084a <_ZN5Shell8tokenizeEPKci+0xe2>
                current++;
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	3301      	adds	r3, #1
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
                _tokens[i][x] = '\0'; // Terminate string
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	2164      	movs	r1, #100	@ 0x64
 8000834:	fb01 f303 	mul.w	r3, r1, r3
 8000838:	441a      	add	r2, r3
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	4413      	add	r3, r2
 800083e:	3304      	adds	r3, #4
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
                return (i+1);
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	3301      	adds	r3, #1
 8000848:	e034      	b.n	80008b4 <_ZN5Shell8tokenizeEPKci+0x14c>
            }
            // Attempt to remove artefacts from the input if any have been added. 
            // Assuming clean input might be better, forcing the end user to think about what they are doing.
            if((c >= 127) || (c<=31)) {current++;continue;}
 800084a:	7dbb      	ldrb	r3, [r7, #22]
 800084c:	2b7e      	cmp	r3, #126	@ 0x7e
 800084e:	d802      	bhi.n	8000856 <_ZN5Shell8tokenizeEPKci+0xee>
 8000850:	7dbb      	ldrb	r3, [r7, #22]
 8000852:	2b1f      	cmp	r3, #31
 8000854:	d803      	bhi.n	800085e <_ZN5Shell8tokenizeEPKci+0xf6>
 8000856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000858:	3301      	adds	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
 800085c:	e022      	b.n	80008a4 <_ZN5Shell8tokenizeEPKci+0x13c>
            // Command arguments end with ';' character
            if(c == ';') {
 800085e:	7dbb      	ldrb	r3, [r7, #22]
 8000860:	2b3b      	cmp	r3, #59	@ 0x3b
 8000862:	d10e      	bne.n	8000882 <_ZN5Shell8tokenizeEPKci+0x11a>
                current++;
 8000864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000866:	3301      	adds	r3, #1
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
                _tokens[i][x] = '\0'; // Terminate string
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	2164      	movs	r1, #100	@ 0x64
 8000870:	fb01 f303 	mul.w	r3, r1, r3
 8000874:	441a      	add	r2, r3
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	4413      	add	r3, r2
 800087a:	3304      	adds	r3, #4
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
                break;
 8000880:	e011      	b.n	80008a6 <_ZN5Shell8tokenizeEPKci+0x13e>
            }
            else {
                _tokens[i][x] = c;
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2164      	movs	r1, #100	@ 0x64
 8000888:	fb01 f303 	mul.w	r3, r1, r3
 800088c:	441a      	add	r2, r3
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	4413      	add	r3, r2
 8000892:	3304      	adds	r3, #4
 8000894:	7dba      	ldrb	r2, [r7, #22]
 8000896:	701a      	strb	r2, [r3, #0]
                current++;
 8000898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089a:	3301      	adds	r3, #1
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
                x++;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	3301      	adds	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
            }
        }
 80008a4:	e7ab      	b.n	80007fe <_ZN5Shell8tokenizeEPKci+0x96>
    for(int i = 1; i<SHELL_MAX_ARGS; i++){
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3301      	adds	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	2b13      	cmp	r3, #19
 80008b0:	dda3      	ble.n	80007fa <_ZN5Shell8tokenizeEPKci+0x92>
        
    }
    return SHELL_MAX_ARGS-1;
 80008b2:	2313      	movs	r3, #19
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	372c      	adds	r7, #44	@ 0x2c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_ZN5Shell16setStringCompareEPFiPKcS1_E>:
* The comparator should return 0 if the strings are equal, all other outputs are treated as not equal. 
* It must be set explicitly before calling Shell::execute to avoid undefined behaviour.
*
* @param ff Pointer to the comparator function.
*/
void Shell::setStringCompare(int (*ff)(const char *, const char *)){
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
    __string_compare = ff;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_ZN5Shell7executeEPKci>:
*
* @param ptr Pointer to string to parse, can be any input e.g. string from UART buffer.
* @param size Size of the ptr, prevents out of bounds errors.
* @return -1 if there's no token in ptr, 0 if no command was executed, 1 if any command was executed.
*/
int Shell::execute(const char *ptr, int size){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
    int nargs = tokenize(ptr, size);
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	68b9      	ldr	r1, [r7, #8]
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff ff3b 	bl	8000768 <_ZN5Shell8tokenizeEPKci>
 80008f2:	6178      	str	r0, [r7, #20]
    if(nargs == 0) return -1;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <_ZN5Shell7executeEPKci+0x24>
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e05a      	b.n	80009b6 <_ZN5Shell7executeEPKci+0xda>
    if(__string_compare(_tokens[0],"print")==0) {
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	3204      	adds	r2, #4
 8000908:	492d      	ldr	r1, [pc, #180]	@ (80009c0 <_ZN5Shell7executeEPKci+0xe4>)
 800090a:	4610      	mov	r0, r2
 800090c:	4798      	blx	r3
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf0c      	ite	eq
 8000914:	2301      	moveq	r3, #1
 8000916:	2300      	movne	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00e      	beq.n	800093c <_ZN5Shell7executeEPKci+0x60>
        if (nargs < 1) return -2;
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	2b00      	cmp	r3, #0
 8000922:	dc02      	bgt.n	800092a <_ZN5Shell7executeEPKci+0x4e>
 8000924:	f06f 0301 	mvn.w	r3, #1
 8000928:	e045      	b.n	80009b6 <_ZN5Shell7executeEPKci+0xda>
        __command_print_callback(_tokens[1]);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	3268      	adds	r2, #104	@ 0x68
 8000934:	4610      	mov	r0, r2
 8000936:	4798      	blx	r3
        return 1;
 8000938:	2301      	movs	r3, #1
 800093a:	e03c      	b.n	80009b6 <_ZN5Shell7executeEPKci+0xda>
    }
	if(__string_compare(_tokens[0],"showtime")==0) {
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	3204      	adds	r2, #4
 8000944:	491f      	ldr	r1, [pc, #124]	@ (80009c4 <_ZN5Shell7executeEPKci+0xe8>)
 8000946:	4610      	mov	r0, r2
 8000948:	4798      	blx	r3
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	bf0c      	ite	eq
 8000950:	2301      	moveq	r3, #1
 8000952:	2300      	movne	r3, #0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d011      	beq.n	800097e <_ZN5Shell7executeEPKci+0xa2>
        if (nargs < 2) return -2;
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	2b01      	cmp	r3, #1
 800095e:	dc02      	bgt.n	8000966 <_ZN5Shell7executeEPKci+0x8a>
 8000960:	f06f 0301 	mvn.w	r3, #1
 8000964:	e027      	b.n	80009b6 <_ZN5Shell7executeEPKci+0xda>
        __command_showtime_callback(_tokens[1], _tokens[2]);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	f102 0068 	add.w	r0, r2, #104	@ 0x68
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	32cc      	adds	r2, #204	@ 0xcc
 8000976:	4611      	mov	r1, r2
 8000978:	4798      	blx	r3
        return 1;
 800097a:	2301      	movs	r3, #1
 800097c:	e01b      	b.n	80009b6 <_ZN5Shell7executeEPKci+0xda>
    }
	if(__string_compare(_tokens[0],"help")==0) {
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	3204      	adds	r2, #4
 8000986:	4910      	ldr	r1, [pc, #64]	@ (80009c8 <_ZN5Shell7executeEPKci+0xec>)
 8000988:	4610      	mov	r0, r2
 800098a:	4798      	blx	r3
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	bf0c      	ite	eq
 8000992:	2301      	moveq	r3, #1
 8000994:	2300      	movne	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00b      	beq.n	80009b4 <_ZN5Shell7executeEPKci+0xd8>
        if (nargs < 0) return -2;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da02      	bge.n	80009a8 <_ZN5Shell7executeEPKci+0xcc>
 80009a2:	f06f 0301 	mvn.w	r3, #1
 80009a6:	e006      	b.n	80009b6 <_ZN5Shell7executeEPKci+0xda>
        __command_help_callback();
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 80009ae:	4798      	blx	r3
        return 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e000      	b.n	80009b6 <_ZN5Shell7executeEPKci+0xda>
    }
	
    return 0;
 80009b4:	2300      	movs	r3, #0
 
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08002528 	.word	0x08002528
 80009c4:	08002530 	.word	0x08002530
 80009c8:	0800253c 	.word	0x0800253c

080009cc <_ZN5Shell25setCommand_print_CallbackEPFvPKcE>:

// Sets callback for the print command
void Shell::setCommand_print_Callback(void(*ff)(const char* text)){
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    __command_print_callback = ff;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	f8c3 27d4 	str.w	r2, [r3, #2004]	@ 0x7d4
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_ZN5Shell28setCommand_showtime_CallbackEPFvPKcS1_E>:
// Sets callback for the showtime command
void Shell::setCommand_showtime_Callback(void(*ff)(const char* random ,const char* another)){
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
    __command_showtime_callback = ff;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_ZN5Shell24setCommand_help_CallbackEPFvvE>:
// Sets callback for the help command
void Shell::setCommand_help_Callback(void(*ff)()){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
    __command_help_callback = ff;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <HAL_UART_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <HAL_UART_MspInit+0x8c>)
 8000af0:	f000 fa1e 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	@ 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40011000 	.word	0x40011000
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f8e1 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci>:
* @param buffer_size Maximum size of read message that can be read.
* @param huart UART handler to be used.
* @param buffer Buffer for storing the read message.
* @return Size of the message that was read.
*/
int UART_UNIVERSAL_READ(UART_HandleTypeDef *huart, char* buffer, int buffer_size){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]


	uint8_t sample;
	while(1){
		if(end == 1){
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x98>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d105      	bne.n	8000bac <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x20>
			current = 0;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x9c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
			end = 0;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
		}
		// Prevents buffer limits from being exceeded
		if(current >buffer_size-1) return current;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x9c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	dc02      	bgt.n	8000bbe <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x32>
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x9c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	e02e      	b.n	8000c1c <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x90>
		// Reads one byte at a time.
		if(HAL_UART_Receive(huart, &sample, 1, 2000) != HAL_OK) return 0;
 8000bbe:	f107 0117 	add.w	r1, r7, #23
 8000bc2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f001 f868 	bl	8001c9e <HAL_UART_Receive>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x56>
 8000bde:	2300      	movs	r3, #0
 8000be0:	e01c      	b.n	8000c1c <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x90>
		// Checks for special characters and increases current
		if((sample>31) && (sample<127)) {buffer[current] = (char)sample; current++;}
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d90f      	bls.n	8000c08 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x7c>
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
 8000bea:	2b7e      	cmp	r3, #126	@ 0x7e
 8000bec:	d80c      	bhi.n	8000c08 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x7c>
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x9c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	7dfa      	ldrb	r2, [r7, #23]
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x9c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x9c>)
 8000c06:	701a      	strb	r2, [r3, #0]
		if(sample == '\r'){
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	2b0d      	cmp	r3, #13
 8000c0c:	d105      	bne.n	8000c1a <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x8e>
			end = 1;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x98>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
			return current;
 8000c14:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x9c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	e000      	b.n	8000c1c <_Z19UART_UNIVERSAL_READP20__UART_HandleTypeDefPci+0x90>
		}
		// Makes it less blocking
		return 0;
 8000c1a:	2300      	movs	r3, #0
	}
	// Something went wrong, shouldn't be here
	return 0;
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000075 	.word	0x20000075
 8000c28:	20000074 	.word	0x20000074

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c30:	f7ff ff9a 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	@ (8000c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f001 fbef 	bl	800243c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc8b 	bl	8000578 <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c70:	0800256c 	.word	0x0800256c
  ldr r2, =_sbss
 8000c74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c78:	2000007c 	.word	0x2000007c

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f90d 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff feb8 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f917 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f8ed 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	@ (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	20000078 	.word	0x20000078

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000078 	.word	0x20000078

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff47 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff5c 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e159      	b.n	8001200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8148 	bne.w	80011fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80a2 	beq.w	80011fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b57      	ldr	r3, [pc, #348]	@ (8001218 <HAL_GPIO_Init+0x2e8>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a56      	ldr	r2, [pc, #344]	@ (8001218 <HAL_GPIO_Init+0x2e8>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b54      	ldr	r3, [pc, #336]	@ (8001218 <HAL_GPIO_Init+0x2e8>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a52      	ldr	r2, [pc, #328]	@ (800121c <HAL_GPIO_Init+0x2ec>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a49      	ldr	r2, [pc, #292]	@ (8001220 <HAL_GPIO_Init+0x2f0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x202>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a48      	ldr	r2, [pc, #288]	@ (8001224 <HAL_GPIO_Init+0x2f4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x1fe>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a47      	ldr	r2, [pc, #284]	@ (8001228 <HAL_GPIO_Init+0x2f8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x1fa>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a46      	ldr	r2, [pc, #280]	@ (800122c <HAL_GPIO_Init+0x2fc>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x1f6>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a45      	ldr	r2, [pc, #276]	@ (8001230 <HAL_GPIO_Init+0x300>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x1f2>
 800111e:	2304      	movs	r3, #4
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001122:	2307      	movs	r3, #7
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x204>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x204>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	@ (800121c <HAL_GPIO_Init+0x2ec>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b38      	ldr	r3, [pc, #224]	@ (8001234 <HAL_GPIO_Init+0x304>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a2f      	ldr	r2, [pc, #188]	@ (8001234 <HAL_GPIO_Init+0x304>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <HAL_GPIO_Init+0x304>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a24      	ldr	r2, [pc, #144]	@ (8001234 <HAL_GPIO_Init+0x304>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_GPIO_Init+0x304>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001234 <HAL_GPIO_Init+0x304>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_GPIO_Init+0x304>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <HAL_GPIO_Init+0x304>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f aea2 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e267      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001256:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b85      	ldr	r3, [pc, #532]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b82      	ldr	r3, [pc, #520]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b7e      	ldr	r3, [pc, #504]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e242      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b76      	ldr	r3, [pc, #472]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b70      	ldr	r3, [pc, #448]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b69      	ldr	r3, [pc, #420]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a68      	ldr	r2, [pc, #416]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b66      	ldr	r3, [pc, #408]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fd2c 	bl	8000d4c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fd28 	bl	8000d4c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	@ 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e207      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fd18 	bl	8000d4c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fd14 	bl	8000d4c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	@ 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f3      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b51      	ldr	r3, [pc, #324]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800134e:	4b4a      	ldr	r3, [pc, #296]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4937      	ldr	r1, [pc, #220]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	@ (800147c <HAL_RCC_OscConfig+0x244>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fccd 	bl	8000d4c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fcc9 	bl	8000d4c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a8      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4925      	ldr	r1, [pc, #148]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_OscConfig+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcac 	bl	8000d4c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fca8 	bl	8000d4c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e187      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_RCC_OscConfig+0x248>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fc8c 	bl	8000d4c <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc88 	bl	8000d4c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e167      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_RCC_OscConfig+0x248>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fc75 	bl	8000d4c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00e      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fc71 	bl	8000d4c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d907      	bls.n	8001484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e150      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ea      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8097 	beq.w	80015cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b81      	ldr	r3, [pc, #516]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a7c      	ldr	r2, [pc, #496]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b7a      	ldr	r3, [pc, #488]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b77      	ldr	r3, [pc, #476]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b74      	ldr	r3, [pc, #464]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a73      	ldr	r2, [pc, #460]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc31 	bl	8000d4c <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fc2d 	bl	8000d4c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e10c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b6a      	ldr	r3, [pc, #424]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x2ea>
 8001514:	4b64      	ldr	r3, [pc, #400]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001518:	4a63      	ldr	r2, [pc, #396]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x30c>
 800152a:	4b5f      	ldr	r3, [pc, #380]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152e:	4a5e      	ldr	r2, [pc, #376]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	@ 0x70
 8001536:	4b5c      	ldr	r3, [pc, #368]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153a:	4a5b      	ldr	r2, [pc, #364]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	@ 0x70
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001544:	4b58      	ldr	r3, [pc, #352]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001548:	4a57      	ldr	r2, [pc, #348]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001550:	4b55      	ldr	r3, [pc, #340]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	4a54      	ldr	r2, [pc, #336]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fbf2 	bl	8000d4c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fbee 	bl	8000d4c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0cb      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	4b49      	ldr	r3, [pc, #292]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x334>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fbdc 	bl	8000d4c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fbd8 	bl	8000d4c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0b5      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a38      	ldr	r2, [pc, #224]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a1 	beq.w	8001718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbac 	bl	8000d4c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fba8 	bl	8000d4c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e087      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491b      	ldr	r1, [pc, #108]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb81 	bl	8000d4c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb7d 	bl	8000d4c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e05c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x416>
 800166c:	e054      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb6a 	bl	8000d4c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb66 	bl	8000d4c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x444>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d121      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fa98 	bl	8000d4c <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fa94 	bl	8000d4c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f9f8 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08002544 	.word	0x08002544
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b090      	sub	sp, #64	@ 0x40
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b59      	ldr	r3, [pc, #356]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80a1 	bhi.w	8001a60 <HAL_RCC_GetSysClockFreq+0x16c>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e09b      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x184>)
 800192a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800192c:	e09b      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001930:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001932:	e098      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b4f      	ldr	r3, [pc, #316]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d028      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	627a      	str	r2, [r7, #36]	@ 0x24
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800195c:	2100      	movs	r1, #0
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001960:	fb03 f201 	mul.w	r2, r3, r1
 8001964:	2300      	movs	r3, #0
 8001966:	fb00 f303 	mul.w	r3, r0, r3
 800196a:	4413      	add	r3, r2
 800196c:	4a43      	ldr	r2, [pc, #268]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x188>)
 800196e:	fba0 1202 	umull	r1, r2, r0, r2
 8001972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001974:	460a      	mov	r2, r1
 8001976:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800197a:	4413      	add	r3, r2
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800197e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001980:	2200      	movs	r2, #0
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	61fa      	str	r2, [r7, #28]
 8001986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800198a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800198e:	f7fe fc33 	bl	80001f8 <__aeabi_uldivmod>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4613      	mov	r3, r2
 8001998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800199a:	e053      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	2200      	movs	r2, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	617a      	str	r2, [r7, #20]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ae:	f04f 0b00 	mov.w	fp, #0
 80019b2:	4652      	mov	r2, sl
 80019b4:	465b      	mov	r3, fp
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	0159      	lsls	r1, r3, #5
 80019c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c4:	0150      	lsls	r0, r2, #5
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	ebb2 080a 	subs.w	r8, r2, sl
 80019ce:	eb63 090b 	sbc.w	r9, r3, fp
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e6:	ebb2 0408 	subs.w	r4, r2, r8
 80019ea:	eb63 0509 	sbc.w	r5, r3, r9
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	00eb      	lsls	r3, r5, #3
 80019f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fc:	00e2      	lsls	r2, r4, #3
 80019fe:	4614      	mov	r4, r2
 8001a00:	461d      	mov	r5, r3
 8001a02:	eb14 030a 	adds.w	r3, r4, sl
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	eb45 030b 	adc.w	r3, r5, fp
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	028b      	lsls	r3, r1, #10
 8001a1e:	4621      	mov	r1, r4
 8001a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a24:	4621      	mov	r1, r4
 8001a26:	028a      	lsls	r2, r1, #10
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	60fa      	str	r2, [r7, #12]
 8001a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a38:	f7fe fbde 	bl	80001f8 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3740      	adds	r7, #64	@ 0x40
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	017d7840 	.word	0x017d7840

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	@ (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08002554 	.word	0x08002554

08001ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac4:	f7ff ffdc 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	@ (8001ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08002554 	.word	0x08002554

08001ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e042      	b.n	8001b80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe ffb2 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	@ 0x24
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fa09 	bl	8001f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d175      	bne.n	8001c94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_UART_Transmit+0x2c>
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e06e      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2221      	movs	r2, #33	@ 0x21
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bc6:	f7ff f8c1 	bl	8000d4c <HAL_GetTick>
 8001bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be0:	d108      	bne.n	8001bf4 <HAL_UART_Transmit+0x6c>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d104      	bne.n	8001bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	e003      	b.n	8001bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bfc:	e02e      	b.n	8001c5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	@ 0x80
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f8df 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e03a      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e007      	b.n	8001c4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1cb      	bne.n	8001bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2140      	movs	r1, #64	@ 0x40
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f8ab 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e006      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b08a      	sub	sp, #40	@ 0x28
 8001ca2:	af02      	add	r7, sp, #8
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	f040 8081 	bne.w	8001dc2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_UART_Receive+0x2e>
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e079      	b.n	8001dc4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2222      	movs	r2, #34	@ 0x22
 8001cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f832 	bl	8000d4c <HAL_GetTick>
 8001ce8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	88fa      	ldrh	r2, [r7, #6]
 8001cee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cfe:	d108      	bne.n	8001d12 <HAL_UART_Receive+0x74>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d104      	bne.n	8001d12 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	e003      	b.n	8001d1a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d1a:	e047      	b.n	8001dac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2120      	movs	r1, #32
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f850 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e042      	b.n	8001dc4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10c      	bne.n	8001d5e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	e01f      	b.n	8001d9e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d66:	d007      	beq.n	8001d78 <HAL_UART_Receive+0xda>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <HAL_UART_Receive+0xe8>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d106      	bne.n	8001d86 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e008      	b.n	8001d98 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1b2      	bne.n	8001d1c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ddc:	e03b      	b.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d037      	beq.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de6:	f7fe ffb1 	bl	8000d4c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e03a      	b.n	8001e76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d023      	beq.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b80      	cmp	r3, #128	@ 0x80
 8001e12:	d020      	beq.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b40      	cmp	r3, #64	@ 0x40
 8001e18:	d01d      	beq.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d116      	bne.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f81d 	bl	8001e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2208      	movs	r2, #8
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d0b4      	beq.n	8001dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b095      	sub	sp, #84	@ 0x54
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	330c      	adds	r3, #12
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e90:	e853 3f00 	ldrex	r3, [r3]
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ea6:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001eae:	e841 2300 	strex	r3, r2, [r1]
 8001eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1e5      	bne.n	8001e86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3314      	adds	r3, #20
 8001ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	e853 3f00 	ldrex	r3, [r3]
 8001ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3314      	adds	r3, #20
 8001ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee2:	e841 2300 	strex	r3, r2, [r1]
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e5      	bne.n	8001eba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d119      	bne.n	8001f2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	330c      	adds	r3, #12
 8001efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	e853 3f00 	ldrex	r3, [r3]
 8001f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f023 0310 	bic.w	r3, r3, #16
 8001f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	330c      	adds	r3, #12
 8001f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f16:	61ba      	str	r2, [r7, #24]
 8001f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1a:	6979      	ldr	r1, [r7, #20]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	e841 2300 	strex	r3, r2, [r1]
 8001f22:	613b      	str	r3, [r7, #16]
   return(result);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e5      	bne.n	8001ef6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f38:	bf00      	nop
 8001f3a:	3754      	adds	r7, #84	@ 0x54
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f48:	b0c0      	sub	sp, #256	@ 0x100
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	ea40 0301 	orr.w	r3, r0, r1
 8001f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f9c:	f021 010c 	bic.w	r1, r1, #12
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001faa:	430b      	orrs	r3, r1
 8001fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbe:	6999      	ldr	r1, [r3, #24]
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	ea40 0301 	orr.w	r3, r0, r1
 8001fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8002210 <UART_SetConfig+0x2cc>)
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d005      	beq.n	8001fe4 <UART_SetConfig+0xa0>
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b8d      	ldr	r3, [pc, #564]	@ (8002214 <UART_SetConfig+0x2d0>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d104      	bne.n	8001fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fe4:	f7ff fd6c 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 8001fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001fec:	e003      	b.n	8001ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fee:	f7ff fd53 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8001ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002000:	f040 810c 	bne.w	800221c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002008:	2200      	movs	r2, #0
 800200a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800200e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002016:	4622      	mov	r2, r4
 8002018:	462b      	mov	r3, r5
 800201a:	1891      	adds	r1, r2, r2
 800201c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800201e:	415b      	adcs	r3, r3
 8002020:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002026:	4621      	mov	r1, r4
 8002028:	eb12 0801 	adds.w	r8, r2, r1
 800202c:	4629      	mov	r1, r5
 800202e:	eb43 0901 	adc.w	r9, r3, r1
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002046:	4690      	mov	r8, r2
 8002048:	4699      	mov	r9, r3
 800204a:	4623      	mov	r3, r4
 800204c:	eb18 0303 	adds.w	r3, r8, r3
 8002050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002054:	462b      	mov	r3, r5
 8002056:	eb49 0303 	adc.w	r3, r9, r3
 800205a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800206a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800206e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002072:	460b      	mov	r3, r1
 8002074:	18db      	adds	r3, r3, r3
 8002076:	653b      	str	r3, [r7, #80]	@ 0x50
 8002078:	4613      	mov	r3, r2
 800207a:	eb42 0303 	adc.w	r3, r2, r3
 800207e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002088:	f7fe f8b6 	bl	80001f8 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <UART_SetConfig+0x2d4>)
 8002092:	fba3 2302 	umull	r2, r3, r3, r2
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	011c      	lsls	r4, r3, #4
 800209a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020ac:	4642      	mov	r2, r8
 80020ae:	464b      	mov	r3, r9
 80020b0:	1891      	adds	r1, r2, r2
 80020b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020b4:	415b      	adcs	r3, r3
 80020b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020bc:	4641      	mov	r1, r8
 80020be:	eb12 0a01 	adds.w	sl, r2, r1
 80020c2:	4649      	mov	r1, r9
 80020c4:	eb43 0b01 	adc.w	fp, r3, r1
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020dc:	4692      	mov	sl, r2
 80020de:	469b      	mov	fp, r3
 80020e0:	4643      	mov	r3, r8
 80020e2:	eb1a 0303 	adds.w	r3, sl, r3
 80020e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020ea:	464b      	mov	r3, r9
 80020ec:	eb4b 0303 	adc.w	r3, fp, r3
 80020f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002100:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002108:	460b      	mov	r3, r1
 800210a:	18db      	adds	r3, r3, r3
 800210c:	643b      	str	r3, [r7, #64]	@ 0x40
 800210e:	4613      	mov	r3, r2
 8002110:	eb42 0303 	adc.w	r3, r2, r3
 8002114:	647b      	str	r3, [r7, #68]	@ 0x44
 8002116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800211a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800211e:	f7fe f86b 	bl	80001f8 <__aeabi_uldivmod>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4611      	mov	r1, r2
 8002128:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <UART_SetConfig+0x2d4>)
 800212a:	fba3 2301 	umull	r2, r3, r3, r1
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2264      	movs	r2, #100	@ 0x64
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	1acb      	subs	r3, r1, r3
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800213e:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <UART_SetConfig+0x2d4>)
 8002140:	fba3 2302 	umull	r2, r3, r3, r2
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800214c:	441c      	add	r4, r3
 800214e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002158:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800215c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002160:	4642      	mov	r2, r8
 8002162:	464b      	mov	r3, r9
 8002164:	1891      	adds	r1, r2, r2
 8002166:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002168:	415b      	adcs	r3, r3
 800216a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800216c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002170:	4641      	mov	r1, r8
 8002172:	1851      	adds	r1, r2, r1
 8002174:	6339      	str	r1, [r7, #48]	@ 0x30
 8002176:	4649      	mov	r1, r9
 8002178:	414b      	adcs	r3, r1
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002188:	4659      	mov	r1, fp
 800218a:	00cb      	lsls	r3, r1, #3
 800218c:	4651      	mov	r1, sl
 800218e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002192:	4651      	mov	r1, sl
 8002194:	00ca      	lsls	r2, r1, #3
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	4603      	mov	r3, r0
 800219c:	4642      	mov	r2, r8
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021a4:	464b      	mov	r3, r9
 80021a6:	460a      	mov	r2, r1
 80021a8:	eb42 0303 	adc.w	r3, r2, r3
 80021ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021c4:	460b      	mov	r3, r1
 80021c6:	18db      	adds	r3, r3, r3
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ca:	4613      	mov	r3, r2
 80021cc:	eb42 0303 	adc.w	r3, r2, r3
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80021da:	f7fe f80d 	bl	80001f8 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <UART_SetConfig+0x2d4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	@ 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	3332      	adds	r3, #50	@ 0x32
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <UART_SetConfig+0x2d4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 0207 	and.w	r2, r3, #7
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4422      	add	r2, r4
 800220a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800220c:	e106      	b.n	800241c <UART_SetConfig+0x4d8>
 800220e:	bf00      	nop
 8002210:	40011000 	.word	0x40011000
 8002214:	40011400 	.word	0x40011400
 8002218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800221c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002220:	2200      	movs	r2, #0
 8002222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002226:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800222a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800222e:	4642      	mov	r2, r8
 8002230:	464b      	mov	r3, r9
 8002232:	1891      	adds	r1, r2, r2
 8002234:	6239      	str	r1, [r7, #32]
 8002236:	415b      	adcs	r3, r3
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
 800223a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800223e:	4641      	mov	r1, r8
 8002240:	1854      	adds	r4, r2, r1
 8002242:	4649      	mov	r1, r9
 8002244:	eb43 0501 	adc.w	r5, r3, r1
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	00eb      	lsls	r3, r5, #3
 8002252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002256:	00e2      	lsls	r2, r4, #3
 8002258:	4614      	mov	r4, r2
 800225a:	461d      	mov	r5, r3
 800225c:	4643      	mov	r3, r8
 800225e:	18e3      	adds	r3, r4, r3
 8002260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002264:	464b      	mov	r3, r9
 8002266:	eb45 0303 	adc.w	r3, r5, r3
 800226a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800226e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800227a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800228a:	4629      	mov	r1, r5
 800228c:	008b      	lsls	r3, r1, #2
 800228e:	4621      	mov	r1, r4
 8002290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002294:	4621      	mov	r1, r4
 8002296:	008a      	lsls	r2, r1, #2
 8002298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800229c:	f7fd ffac 	bl	80001f8 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4b60      	ldr	r3, [pc, #384]	@ (8002428 <UART_SetConfig+0x4e4>)
 80022a6:	fba3 2302 	umull	r2, r3, r3, r2
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	011c      	lsls	r4, r3, #4
 80022ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022c0:	4642      	mov	r2, r8
 80022c2:	464b      	mov	r3, r9
 80022c4:	1891      	adds	r1, r2, r2
 80022c6:	61b9      	str	r1, [r7, #24]
 80022c8:	415b      	adcs	r3, r3
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022d0:	4641      	mov	r1, r8
 80022d2:	1851      	adds	r1, r2, r1
 80022d4:	6139      	str	r1, [r7, #16]
 80022d6:	4649      	mov	r1, r9
 80022d8:	414b      	adcs	r3, r1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e8:	4659      	mov	r1, fp
 80022ea:	00cb      	lsls	r3, r1, #3
 80022ec:	4651      	mov	r1, sl
 80022ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f2:	4651      	mov	r1, sl
 80022f4:	00ca      	lsls	r2, r1, #3
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	4642      	mov	r2, r8
 80022fe:	189b      	adds	r3, r3, r2
 8002300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002304:	464b      	mov	r3, r9
 8002306:	460a      	mov	r2, r1
 8002308:	eb42 0303 	adc.w	r3, r2, r3
 800230c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800231a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002328:	4649      	mov	r1, r9
 800232a:	008b      	lsls	r3, r1, #2
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002332:	4641      	mov	r1, r8
 8002334:	008a      	lsls	r2, r1, #2
 8002336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800233a:	f7fd ff5d 	bl	80001f8 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4611      	mov	r1, r2
 8002344:	4b38      	ldr	r3, [pc, #224]	@ (8002428 <UART_SetConfig+0x4e4>)
 8002346:	fba3 2301 	umull	r2, r3, r3, r1
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2264      	movs	r2, #100	@ 0x64
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	1acb      	subs	r3, r1, r3
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	3332      	adds	r3, #50	@ 0x32
 8002358:	4a33      	ldr	r2, [pc, #204]	@ (8002428 <UART_SetConfig+0x4e4>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002364:	441c      	add	r4, r3
 8002366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800236a:	2200      	movs	r2, #0
 800236c:	673b      	str	r3, [r7, #112]	@ 0x70
 800236e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	1891      	adds	r1, r2, r2
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	415b      	adcs	r3, r3
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002384:	4641      	mov	r1, r8
 8002386:	1851      	adds	r1, r2, r1
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	4649      	mov	r1, r9
 800238c:	414b      	adcs	r3, r1
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800239c:	4659      	mov	r1, fp
 800239e:	00cb      	lsls	r3, r1, #3
 80023a0:	4651      	mov	r1, sl
 80023a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a6:	4651      	mov	r1, sl
 80023a8:	00ca      	lsls	r2, r1, #3
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	4642      	mov	r2, r8
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023b6:	464b      	mov	r3, r9
 80023b8:	460a      	mov	r2, r1
 80023ba:	eb42 0303 	adc.w	r3, r2, r3
 80023be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80023d8:	4649      	mov	r1, r9
 80023da:	008b      	lsls	r3, r1, #2
 80023dc:	4641      	mov	r1, r8
 80023de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e2:	4641      	mov	r1, r8
 80023e4:	008a      	lsls	r2, r1, #2
 80023e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023ea:	f7fd ff05 	bl	80001f8 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <UART_SetConfig+0x4e4>)
 80023f4:	fba3 1302 	umull	r1, r3, r3, r2
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	2164      	movs	r1, #100	@ 0x64
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	3332      	adds	r3, #50	@ 0x32
 8002406:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <UART_SetConfig+0x4e4>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4422      	add	r2, r4
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002422:	46bd      	mov	sp, r7
 8002424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002428:	51eb851f 	.word	0x51eb851f

0800242c <memset>:
 800242c:	4402      	add	r2, r0
 800242e:	4603      	mov	r3, r0
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <memset+0xa>
 8002434:	4770      	bx	lr
 8002436:	f803 1b01 	strb.w	r1, [r3], #1
 800243a:	e7f9      	b.n	8002430 <memset+0x4>

0800243c <__libc_init_array>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4d0d      	ldr	r5, [pc, #52]	@ (8002474 <__libc_init_array+0x38>)
 8002440:	4c0d      	ldr	r4, [pc, #52]	@ (8002478 <__libc_init_array+0x3c>)
 8002442:	1b64      	subs	r4, r4, r5
 8002444:	10a4      	asrs	r4, r4, #2
 8002446:	2600      	movs	r6, #0
 8002448:	42a6      	cmp	r6, r4
 800244a:	d109      	bne.n	8002460 <__libc_init_array+0x24>
 800244c:	4d0b      	ldr	r5, [pc, #44]	@ (800247c <__libc_init_array+0x40>)
 800244e:	4c0c      	ldr	r4, [pc, #48]	@ (8002480 <__libc_init_array+0x44>)
 8002450:	f000 f818 	bl	8002484 <_init>
 8002454:	1b64      	subs	r4, r4, r5
 8002456:	10a4      	asrs	r4, r4, #2
 8002458:	2600      	movs	r6, #0
 800245a:	42a6      	cmp	r6, r4
 800245c:	d105      	bne.n	800246a <__libc_init_array+0x2e>
 800245e:	bd70      	pop	{r4, r5, r6, pc}
 8002460:	f855 3b04 	ldr.w	r3, [r5], #4
 8002464:	4798      	blx	r3
 8002466:	3601      	adds	r6, #1
 8002468:	e7ee      	b.n	8002448 <__libc_init_array+0xc>
 800246a:	f855 3b04 	ldr.w	r3, [r5], #4
 800246e:	4798      	blx	r3
 8002470:	3601      	adds	r6, #1
 8002472:	e7f2      	b.n	800245a <__libc_init_array+0x1e>
 8002474:	08002564 	.word	0x08002564
 8002478:	08002564 	.word	0x08002564
 800247c:	08002564 	.word	0x08002564
 8002480:	08002568 	.word	0x08002568

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
